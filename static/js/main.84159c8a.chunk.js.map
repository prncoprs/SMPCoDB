{"version":3,"sources":["components/model/TableContext.tsx","components/pages/home/utils/table_structure_schema.ts","components/pages/table/InputRowTableConfigCard.tsx","settings/column_types.ts","components/pages/table/TableConfigCard.tsx","components/pages/table/TableConfigPage.tsx","components/model/utils.tsx","components/model/CodeContext.tsx","components/pages/code/CodePanel.tsx","components/pages/code/CodePage.tsx","components/pages/code/CodeAction.tsx","settings/routes.tsx","components/sider/SideBar.tsx","components/model/SettingsContext.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TableConfigContext","React","createContext","TableConfigProvider","props","children","useState","configs","setConfigsState","openRawConfigDialog","setOpenRawConfigDialog","useEffect","tableConfig","localStorage","getItem","JSON","parse","setItem","stringify","setConfigs","useCallback","vs","value","Provider","tableStructureSchema","$schema","type","items","$ref","definitions","TableConfigElement","additionalProperties","properties","data_sizes","data_paths","table_name","columns","required","title","Column","column_type","name","InputRowTableConfigCard","useContext","setValue","onOpen","onClose","handleJSONEditorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","enableSchemaRequest","schemas","uri","fileMatch","schema","subTitle","extra","onClick","style","maxWidth","Link","target","href","visible","onOk","onCancel","footer","width","window","innerWidth","height","language","options","minimap","enabled","beforeMount","e","onChange","column_types","table_owner","TableConfigCard","config","index","setName","open","setOpen","formValues","longest","Math","max","length","path_size","Array","from","map","c","size","undefined","path","i","updateTableName","updateConfig","filter","v","parseInt","deleteTable","Modal","confirm","content","splice","notification","success","message","placement","id","margin","shape","marginRight","DeleteOutlined","EditOutlined","initialValues","onValuesChange","_","Title","level","List","fields","add","remove","gutter","key","fieldKey","restField","display","marginBottom","xs","md","Item","rules","placeholder","span","MinusCircleOutlined","className","block","icon","PlusOutlined","Option","marginTop","TableConfigPage","addTable","push","overflowY","offsetBottom","position","right","justify","sqlKeywords","keyword","desc","Utils","p","URL","process","range","model","text","tables","contents","k","toLowerCase","includes","table","column","toLocaleLowerCase","suggestions","label","kind","CompletionItemKind","Constant","documentation","insertText","toUpperCase","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","Keyword","document","CodeContext","CodeProvider","codeRunResults","setCodeRunResultState","isLoading","setIsLoading","setIndex","showEdit","setShowEdit","code","err","console","log","setCodeRunResults","runCode","tableConfigs","a","url","getURL","data","axios","post","sql","annotation_name","num_of_rows","resp","result","info","error","description","response","duration","CodePanel","codeRunResult","handleSQLEditorWillMount","updateCode","rows","res","server_result","cs","slice","forEach","s","j","padding","overflowX","toLocaleUpperCase","dataIndex","dataSource","scroll","y","x","CodePage","registerCompletionItemProvider","provideCompletionItems","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","generateSuggestions","registerHoverProvider","provideHover","getWordAtPosition","generateHover","renderPanel","TabPane","tab","addIcon","onEdit","targetKey","action","CodeAction","Form","useForm","form","reConfigure","values","getFieldsValue","setFieldsValue","loading","CaretRightOutlined","resetFields","routes","component","TableOutlined","hasSubMenu","SettingOutlined","SideBar","location","useLocation","history","useHistory","selectedPath","setSelectedPath","expanded","pathname","route","find","r","renderSubMenu","element","getElementById","scrollIntoView","renderMenu","subMenus","onTitleClick","theme","mode","selectedKeys","SettingsContext","SettingsProvider","role","setRoleState","setRole","Layout","Header","Sider","Content","App","collapsed","setCollapsed","overflow","bodyStyle","align","MenuUnfoldOutlined","MenuFoldOutlined","flexGrow","exact","background","collapsible","trigger","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.84159c8a.chunk.js","sourcesContent":["import React from \"react\";\nimport { TableConfig } from \"./table-config\";\n\ninterface TableConfigContext {\n  configs: TableConfig[];\n  setConfigs(configs: TableConfig[]): void;\n  openRawConfigDialog: boolean;\n  setOpenRawConfigDialog(v: boolean): void;\n}\n\n//@ts-ignore\nexport const TableConfigContext = React.createContext<TableConfigContext>({});\n\nexport default function TableConfigProvider(props: any) {\n  const { children } = props;\n\n  const [configs, setConfigsState] = React.useState<TableConfig[]>([]);\n  const [openRawConfigDialog, setOpenRawConfigDialog] = React.useState(false);\n\n  React.useEffect(() => {\n    let tableConfig = localStorage.getItem(\"tableStructure\");\n    if (tableConfig !== null) {\n      setConfigsState(JSON.parse(tableConfig));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"tableStructure\", JSON.stringify(configs));\n  }, [configs]);\n\n  const setConfigs = React.useCallback(\n    (vs: TableConfig[]) => {\n      localStorage.setItem(\"tableStructure\", JSON.stringify(vs));\n      setConfigsState(JSON.parse(JSON.stringify(vs)));\n    },\n    [configs]\n  );\n\n  const value: TableConfigContext = {\n    configs,\n    setConfigs,\n    setOpenRawConfigDialog,\n    openRawConfigDialog,\n  };\n\n  return (\n    <TableConfigContext.Provider value={value}>\n      {children}\n    </TableConfigContext.Provider>\n  );\n}\n","export const tableStructureSchema = {\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  type: \"array\",\n  items: {\n    $ref: \"#/definitions/TableConfigElement\",\n  },\n  definitions: {\n    TableConfigElement: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        data_sizes: {\n          type: \"array\",\n          items: {\n            type: \"integer\",\n          },\n        },\n        data_paths: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        table_name: {\n          type: \"string\",\n        },\n        columns: {\n          type: \"array\",\n          items: {\n            $ref: \"#/definitions/Column\",\n          },\n        },\n      },\n      required: [\"columns\", \"data_sizes\", \"table_name\"],\n      title: \"TableConfigElement\",\n    },\n    Column: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        column_type: {\n          type: \"string\",\n        },\n        name: {\n          type: \"string\",\n        },\n      },\n      required: [\"column_type\", \"name\"],\n      title: \"Column\",\n    },\n  },\n};\n","import React from \"react\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Button, PageHeader, Row, Typography, Modal } from \"antd\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { tableStructureSchema } from \"../home/utils/table_structure_schema\";\n\nexport default function InputRowTableConfigCard() {\n  const { setOpenRawConfigDialog, openRawConfigDialog, configs, setConfigs } =\n    React.useContext(TableConfigContext);\n\n  const [value, setValue] = React.useState(\"\");\n\n  const onOpen = React.useCallback(() => {\n    setValue(JSON.stringify(configs, null, 4));\n    setOpenRawConfigDialog(true);\n  }, [configs]);\n\n  const onClose = React.useCallback(() => {\n    setConfigs(JSON.parse(value));\n    setOpenRawConfigDialog(false);\n  }, [value]);\n\n  const handleJSONEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        enableSchemaRequest: true,\n        schemas: [\n          {\n            uri: \"https://raw.githubusercontent.com/sirily11/SECYAN-GEN/master/examples/table_config.json\",\n            fileMatch: [\"*\"],\n            schema: tableStructureSchema,\n          },\n        ],\n      });\n    },\n    [value]\n  );\n\n  return (\n    <PageHeader\n      title=\"Table Configuration\"\n      subTitle=\"Config your table's info here\"\n      extra={[\n        <Button type=\"primary\" onClick={onOpen}>\n          Set Raw Data\n        </Button>,\n      ]}\n    >\n      <Typography style={{ maxWidth: \"800px\" }}>\n        You can either use the raw Data Config Editor to modify your database\n        table's infomation, or use the GUI below to modify your table. You can\n        check this{\" \"}\n        <Typography.Link\n          target=\"_blank\"\n          href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n        >\n          Link\n        </Typography.Link>{\" \"}\n        for example table configuration.\n      </Typography>\n      <Modal\n        title=\"Raw Data Configuration\"\n        visible={openRawConfigDialog}\n        onOk={onClose}\n        onCancel={onClose}\n        footer={[<Button onClick={onClose}>Close</Button>]}\n        width={window.innerWidth * 0.8}\n      >\n        <Editor\n          height={500}\n          language=\"json\"\n          options={{ minimap: { enabled: false } }}\n          beforeMount={(e) => handleJSONEditorWillMount(e)}\n          value={value}\n          onChange={(e) => {\n            setValue(e ?? \"\");\n          }}\n        />\n      </Modal>\n    </PageHeader>\n  );\n}\n","export const column_types = [\"INT\", \"STRING\", \"DECIMAL\", \"DATE\"];\n\nexport const table_owner = [\"CLIENT\", \"SERVER\"];\n","import {\n  Button,\n  Card,\n  Input,\n  Space,\n  Form,\n  Row,\n  Col,\n  Typography,\n  Divider,\n  Select,\n  Modal,\n  notification,\n} from \"antd\";\nimport React from \"react\";\nimport { TableConfig } from \"../../model/table-config\";\nimport {\n  EditOutlined,\n  PlusOutlined,\n  MinusCircleOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { column_types, table_owner } from \"../../../settings/column_types\";\n\ninterface Props {\n  config: TableConfig;\n  index: number;\n}\n\ninterface FormValue {\n  path_size: { size: number; path: string }[];\n  columns: any[];\n}\n\nexport default function TableConfigCard(props: Props) {\n  const { config, index } = props;\n  const [name, setName] = React.useState(config.table_name);\n  const [open, setOpen] = React.useState(false);\n  const { setConfigs, configs } = React.useContext(TableConfigContext);\n\n  const formValues = React.useCallback(() => {\n    let longest = Math.max(\n      config?.data_paths?.length ?? 0,\n      config?.data_sizes?.length ?? 0\n    );\n    let path_size = Array.from(Array(longest)).map((c) => {\n      return { size: undefined, path: undefined };\n    });\n\n    for (let i = 0; i < longest; i++) {\n      if (config?.data_sizes?.length ?? 0 < i) {\n        //@ts-ignore\n        path_size[i].size = config.data_sizes[i];\n      }\n\n      if (config?.data_paths?.length ?? 0 < i) {\n        //@ts-ignore\n        path_size[i].path = config.data_paths[i];\n      }\n\n      return {\n        path_size,\n        columns: config.columns,\n      };\n    }\n  }, [config]);\n\n  const updateTableName = React.useCallback(() => {\n    configs[index].table_name = name;\n    setConfigs(configs);\n    setOpen(false);\n  }, [name]);\n\n  const updateConfig = React.useCallback(\n    (value: FormValue) => {\n      let path_size = value.path_size.filter((v) => v !== undefined);\n      configs[index].data_sizes = path_size.map((v: any) => parseInt(v.size));\n      configs[index].data_paths = path_size.map((v: any) => v.path);\n      configs[index].columns = value.columns;\n      setConfigs(configs);\n    },\n    [config]\n  );\n\n  const deleteTable = React.useCallback(() => {\n    Modal.confirm({\n      title: \"confirm\",\n      content: \"Delete this table\",\n      onOk: () => {\n        configs.splice(index, 1);\n        setConfigs(JSON.parse(JSON.stringify(configs)));\n        notification.success({\n          message: \"Table deleted\",\n          placement: \"bottomRight\",\n        });\n      },\n    });\n  }, [config]);\n\n  return (\n    <Card\n      id={config.table_name}\n      title={`${config.table_name} - Client`}\n      key={config.table_name}\n      style={{ margin: 10 }}\n      extra={[\n        <Button\n          shape=\"circle\"\n          onClick={deleteTable}\n          style={{ marginRight: 10 }}\n        >\n          <DeleteOutlined />\n        </Button>,\n        <Button shape=\"circle\" onClick={() => setOpen(true)}>\n          <EditOutlined />\n        </Button>,\n      ]}\n    >\n      <Form\n        initialValues={formValues()}\n        onValuesChange={(_, v) => {\n          updateConfig(v);\n        }}\n      >\n        {/* data sizes and data paths */}\n\n        <Typography.Title level={5}>Data Sizes and Paths</Typography.Title>\n        <Form.List name=\"path_size\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={`path_size-${key}`}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                  md={12}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={10} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"size\"]}\n                        fieldKey={[fieldKey, \"size\"]}\n                        rules={[\n                          { required: true, message: \"Data Size is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data size\" type=\"number\" />\n                      </Form.Item>\n                    </Col>\n                    <Col md={12} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"path\"]}\n                        fieldKey={[fieldKey, \"path\"]}\n                        rules={[\n                          { required: true, message: \"Data Path is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data path\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => remove(name)}\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Data Path and Size\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n\n        {/* end data sizes and data paths */}\n        {/* columns */}\n        <Typography.Title level={5}>Table Columns</Typography.Title>\n        <Form.List name=\"columns\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={`column-${key}`}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={5} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"column_type\"]}\n                        fieldKey={[fieldKey, \"type\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column type is required\",\n                          },\n                        ]}\n                      >\n                        <Select>\n                          {column_types.map((c, i) => (\n                            <Select.Option value={c}>{c}</Select.Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n                    </Col>\n                    <Col md={5} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"name\"]}\n                        fieldKey={[fieldKey, \"name\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column name is required\",\n                          },\n                        ]}\n                      >\n                        <Input placeholder=\"Column Name\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined onClick={() => remove(name)} />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Column\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n        {/* end columns */}\n      </Form>\n      <Modal\n        visible={open}\n        title=\"Table name\"\n        onCancel={() => {\n          setName(config.table_name);\n          setOpen(false);\n        }}\n        onOk={updateTableName}\n      >\n        <Input\n          placeholder=\"Table name\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n        <Select\n          style={{ width: \"100%\", marginTop: 20 }}\n          placeholder=\"Select Owner\"\n        >\n          {table_owner.map((v) => (\n            <Select.Option value={v} key={v}>\n              {v}\n            </Select.Option>\n          ))}\n        </Select>\n      </Modal>\n    </Card>\n  );\n}\n","import { Affix, Button, notification, Row, Typography } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React from \"react\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport InputRowTableConfigCard from \"./InputRowTableConfigCard\";\nimport TableConfigCard from \"./TableConfigCard\";\n\nexport default function TableConfigPage() {\n  const { configs, setConfigs } = React.useContext(TableConfigContext);\n  const [open, setOpen] = React.useState(false);\n\n  const addTable = React.useCallback(() => {\n    configs.push({\n      table_name: \"table\",\n      data_sizes: [],\n      data_paths: [],\n      columns: [],\n    });\n    setConfigs(configs);\n    setOpen(false);\n    notification.success({\n      message: \"Added a new table\",\n      placement: \"bottomRight\",\n    });\n  }, [configs]);\n\n  return (\n    <div style={{ overflowY: \"scroll\", height: \"100%\" }}>\n      <InputRowTableConfigCard />\n      {configs.map((c, i) => (\n        <TableConfigCard key={`config-${i}`} config={c} index={i} />\n      ))}\n\n      <Affix offsetBottom={20} style={{ position: \"fixed\", right: 10 }}>\n        <Row justify=\"end\">\n          <Button\n            type=\"primary\"\n            style={{ marginRight: 20 }}\n            onClick={() => setOpen(true)}\n          >\n            Add Table\n          </Button>\n        </Row>\n      </Affix>\n      <Modal\n        visible={open}\n        title=\"Add New Table\"\n        onOk={addTable}\n        onCancel={() => {\n          setOpen(false);\n        }}\n      >\n        <Typography>Create a empty table?</Typography>\n      </Modal>\n    </div>\n  );\n}\n","import * as monaco from \"monaco-editor\";\nimport { TableConfig } from \"./table-config\";\nexport interface TableInterface {\n  table_name: string;\n  columns: ColumnInterface[];\n}\n\nexport interface ColumnInterface {\n  column_type: string;\n  name: string;\n}\n\nexport const sqlKeywords = [\n  {\n    keyword: \"select\",\n    desc: \"\",\n  },\n  {\n    keyword: \"from\",\n    desc: \"\",\n  },\n  {\n    keyword: \"where\",\n    desc: \"\",\n  },\n  {\n    keyword: \"sum\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"max\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"avg\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"count\",\n    desc: \"Aggregation function\",\n  },\n\n  {\n    keyword: \"group by\",\n    desc: \"\",\n  },\n  {\n    keyword: \"desc\",\n    desc: \"\",\n  },\n  {\n    keyword: \"limit\",\n    desc: \"\",\n  },\n  {\n    keyword: \"having\",\n    desc: \"\",\n  },\n  {\n    keyword: \"exists\",\n    desc: \"\",\n  },\n];\n\nexport class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n\n  static generateHover(\n    range: any,\n    model: any,\n    text: string,\n    tables?: TableConfig[]\n  ) {\n    if (tables) {\n      for (let k of sqlKeywords) {\n        if (text.toLowerCase().includes(k.keyword.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"SQL Built In\" }, { value: k.desc }],\n          };\n        }\n      }\n      for (let table of tables) {\n        if (text.toLowerCase().includes(table.table_name.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"Table Name\" }],\n          };\n        }\n\n        for (let column of table.columns) {\n          if (text.toLocaleLowerCase().includes(column.name.toLowerCase())) {\n            return {\n              range,\n              contents: [\n                { value: table.table_name },\n                { value: `**Type: ${column.column_type}**` },\n              ],\n            };\n          }\n        }\n      }\n    } else\n      return {\n        range,\n        contents: [],\n      };\n  }\n\n  static generateSuggestions(range: any, tables?: TableConfig[]) {\n    if (tables) {\n      let suggestions = [];\n      for (let table of tables) {\n        suggestions.push({\n          label: table.table_name,\n          kind: monaco.languages.CompletionItemKind.Constant,\n          documentation: \"\",\n          insertText: table.table_name.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n\n        for (let column of table.columns) {\n          suggestions.push({\n            label: column.name,\n            kind: monaco.languages.CompletionItemKind.Constant,\n            documentation: `${column.column_type}`,\n            insertText: column.name,\n            insertTextRules:\n              monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            range: range,\n          });\n        }\n      }\n\n      for (let k of sqlKeywords) {\n        suggestions.push({\n          label: k.keyword,\n          kind: monaco.languages.CompletionItemKind.Keyword,\n          document: k.desc,\n          insertText: k.keyword.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n      }\n\n      return suggestions;\n    } else {\n      return [];\n    }\n  }\n}\n","import { notification } from \"antd\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { CodeRunResult } from \"./code-run-result\";\nimport { TableConfig } from \"./table-config\";\nimport { Utils } from \"./utils\";\n\ninterface Code {\n  codeRunResults: CodeRunResult[];\n  setCodeRunResults(c: CodeRunResult[]): void;\n  runCode(index: number, tableConfigs: TableConfig[]): Promise<void>;\n  isLoading: boolean;\n  index: number;\n  setIndex(num: number): void;\n  showEdit: boolean;\n  setShowEdit(b: boolean): void;\n}\n\n//@ts-ignore\nexport const CodeContext = React.createContext<Code>({});\n\nexport default function CodeProvider(props: any) {\n  const { children } = props;\n  const [codeRunResults, setCodeRunResultState] = React.useState<\n    CodeRunResult[]\n  >([]);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [index, setIndex] = React.useState(0);\n  const [showEdit, setShowEdit] = React.useState(false);\n\n  React.useEffect(() => {\n    let code = localStorage.getItem(\"code\");\n    if (code) {\n      try {\n        setCodeRunResultState(JSON.parse(code));\n      } catch (err) {\n        console.log(\"No Code Saved\");\n      }\n    }\n  }, []);\n\n  const setCodeRunResults = React.useCallback(\n    (c: CodeRunResult[]) => {\n      localStorage.setItem(\"code\", JSON.stringify(c));\n      setCodeRunResultState(JSON.parse(JSON.stringify(c)));\n    },\n    [codeRunResults]\n  );\n\n  const runCode = React.useCallback(\n    async (index: number, tableConfigs: TableConfig[]) => {\n      let url = Utils.getURL(\"/generate_python\");\n      let data = codeRunResults[index];\n\n      try {\n        setIsLoading(true);\n        let resp = await axios.post(url, {\n          sql: data.code,\n          annotation_name: data.annotation_name,\n          num_of_rows: data.num_of_rows,\n          table: JSON.stringify(tableConfigs),\n        });\n\n        codeRunResults[index].result = resp.data;\n\n        setCodeRunResults(codeRunResults);\n        notification.info({\n          message: \"Code results returned\",\n          placement: \"bottomRight\",\n        });\n        setIsLoading(false);\n      } catch (err) {\n        setIsLoading(false);\n        notification.error({\n          message: \"Cannot generate code\",\n          description: `${\n            err?.response?.data ?? \"Cannot connect to the backend\"\n          }`,\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n      }\n    },\n    [codeRunResults]\n  );\n\n  const value: Code = {\n    codeRunResults,\n    setCodeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setIndex,\n    showEdit,\n    setShowEdit,\n  };\n\n  return <CodeContext.Provider value={value}>{children}</CodeContext.Provider>;\n}\n","import React from \"react\";\nimport { CodeRunResult } from \"../../model/code-run-result\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Utils } from \"../../model/utils\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport {\n  Button,\n  Card,\n  Col,\n  Form,\n  Input,\n  notification,\n  Row,\n  Spin,\n  Table,\n  Tooltip,\n} from \"antd\";\n\nimport Modal from \"antd/lib/modal/Modal\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\n\ninterface Props {\n  codeRunResult: CodeRunResult;\n  index: number;\n  handleSQLEditorWillMount(m: any): void;\n}\n\nconst height = \"calc(100vh - 64px - 56px - 20px)\";\nconst tableHeight = \"calc(100vh - 64px - 56px - 200px)\";\n\nexport default function CodePanel(props: Props) {\n  const { codeRunResult, index, handleSQLEditorWillMount } = props;\n  const { setCodeRunResults, codeRunResults, showEdit, setShowEdit } =\n    React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n\n  // Update editor code\n  const updateCode = React.useCallback(\n    (code: string) => {\n      codeRunResults[index].code = code;\n      setCodeRunResults(codeRunResults);\n    },\n    [codeRunResult]\n  );\n\n  // Table columns\n  const columns = () => {\n    if (codeRunResult.result?.server_result?.length ?? 0 > 0) {\n      return codeRunResult.result?.server_result[0].map((v) => {\n        return {\n          title: v.toLocaleUpperCase(),\n          dataIndex: v.toLowerCase(),\n          key: v.toLowerCase(),\n        };\n      });\n    }\n    return [];\n  };\n\n  const rows = () => {\n    let res: any[] = [];\n    if (codeRunResult.result?.server_result?.length ?? 0 > 0) {\n      let cs = codeRunResult.result?.server_result[0]!;\n      codeRunResult.result?.server_result.slice(1).forEach((s, i) => {\n        let data: { [key: string]: any } = {\n          key: i,\n        };\n        s.forEach((c, j) => {\n          data[cs[j]] = c;\n        });\n        res.push(data);\n      });\n    }\n\n    return res;\n  };\n\n  rows();\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Row gutter={[10, 10]}>\n        <Col xs={8}>\n          <Editor\n            value={codeRunResult.code}\n            language=\"sql\"\n            beforeMount={(e) => handleSQLEditorWillMount(e)}\n            options={{ minimap: { enabled: false } }}\n            height={height}\n            onChange={(e) => {\n              updateCode(e as string);\n            }}\n          />\n        </Col>\n        <Col\n          xs={16}\n          style={{ overflowY: \"scroll\", overflowX: \"scroll\", height: \"100%\" }}\n        >\n          <Card style={{ height: height, overflowY: \"hidden\" }}>\n            {codeRunResult.result && (\n              <Table\n                style={{\n                  width: \"100%\",\n                }}\n                columns={columns()}\n                dataSource={rows()}\n                scroll={{ y: tableHeight, x: \"4000px\" }}\n              />\n            )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Affix, Button, Col, Row, Table, Tabs } from \"antd\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { Utils } from \"../../model/utils\";\nimport CodePanel from \"./CodePanel\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\n\nexport default function CodePage() {\n  const { codeRunResults, setCodeRunResults, setIndex } =\n    React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n\n  const handleSQLEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      monaco.languages.registerCompletionItemProvider(\"sql\", {\n        provideCompletionItems: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordUntilPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          };\n          if (configs) {\n            return {\n              suggestions: Utils.generateSuggestions(range, configs),\n            };\n          }\n        },\n      });\n\n      monaco.languages.registerHoverProvider(\"sql\", {\n        provideHover: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordAtPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word?.startColumn,\n            endColumn: word?.endColumn,\n          };\n          return Utils.generateHover(range, model, word?.word ?? \"\", configs);\n        },\n      });\n    },\n    [configs]\n  );\n\n  const renderPanel = React.useCallback(() => {\n    return codeRunResults.map((c, i) => (\n      <Tabs.TabPane tab={c.name} key={i} style={{ height: \"100%\" }}>\n        <CodePanel\n          codeRunResult={c}\n          index={i}\n          handleSQLEditorWillMount={handleSQLEditorWillMount}\n        />\n      </Tabs.TabPane>\n    ));\n  }, [codeRunResults]);\n\n  return (\n    <Tabs\n      type=\"editable-card\"\n      style={{ height: \"100%\" }}\n      addIcon={<PlusOutlined />}\n      onChange={(index) => {\n        setIndex(parseInt(index));\n      }}\n      onEdit={(targetKey, action) => {\n        if (action === \"add\") {\n          codeRunResults.push({\n            name: \"newResult\",\n            code: \"\",\n            num_of_rows: 100,\n            annotation_name: \"q3_annot\",\n          });\n          setCodeRunResults(codeRunResults);\n        } else {\n          codeRunResults.splice(parseInt(targetKey as string), 1);\n          setCodeRunResults(codeRunResults);\n        }\n      }}\n    >\n      {renderPanel()}\n    </Tabs>\n  );\n}\n","import { Button, Form, Input, Row, Tooltip } from \"antd\";\nimport React from \"react\";\nimport { EditOutlined, CaretRightOutlined } from \"@ant-design/icons\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport Modal from \"antd/lib/modal/Modal\";\n\nexport default function CodeAction() {\n  const {\n    setCodeRunResults,\n    codeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setShowEdit,\n    showEdit,\n  } = React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n  const [form] = Form.useForm();\n\n  // Rename, etc\n  const reConfigure = React.useCallback(() => {\n    let values = form.getFieldsValue();\n    codeRunResults[index].annotation_name = values.annotation_name;\n    codeRunResults[index].name = values.name;\n    codeRunResults[index].num_of_rows = parseInt(values.num_of_rows);\n    setCodeRunResults(codeRunResults);\n    setShowEdit(false);\n  }, [codeRunResults, index]);\n\n  React.useEffect(() => {\n    form.setFieldsValue(codeRunResults[index]);\n  }, [showEdit]);\n\n  return (\n    <Row justify=\"end\" style={{ marginRight: 20 }}>\n      <Tooltip title=\"Run Code\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          loading={isLoading}\n          onClick={async () => {\n            await runCode(index, configs);\n          }}\n        >\n          <CaretRightOutlined />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Rename\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          onClick={() => {\n            setShowEdit(true);\n          }}\n        >\n          <EditOutlined />\n        </Button>\n      </Tooltip>\n      <Modal\n        title=\"Configuration\"\n        visible={showEdit}\n        onOk={reConfigure}\n        onCancel={() => {\n          form.resetFields();\n          setShowEdit(false);\n        }}\n      >\n        <Form initialValues={codeRunResults[index]} form={form}>\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input placeholder=\"Name\" />\n          </Form.Item>\n          <Form.Item name=\"num_of_rows\" label=\"Number of rows\">\n            <Input placeholder=\"Num of rows\" type=\"number\" />\n          </Form.Item>\n          <Form.Item name=\"annotation_name\" label=\"Annotation Name\">\n            <Input placeholder=\"Annotation Name\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Row>\n  );\n}\n","import React from \"react\";\nimport { TableOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport TableConfigPage from \"../components/pages/table/TableConfigPage\";\nimport CodePage from \"../components/pages/code/CodePage\";\nimport CodeAction from \"../components/pages/code/CodeAction\";\n\ninterface Route {\n  path: string;\n  component: JSX.Element;\n  title: string;\n  icon: JSX.Element;\n  hasSubMenu: boolean;\n  action?: JSX.Element;\n}\n\nexport const routes: Route[] = [\n  {\n    path: \"/\",\n    title: \"Table Config\",\n    component: <TableConfigPage />,\n    icon: <TableOutlined />,\n    hasSubMenu: true,\n  },\n  {\n    path: \"/settings\",\n    title: \"Settings\",\n    component: <div></div>,\n    icon: <SettingOutlined />,\n    hasSubMenu: false,\n  },\n  {\n    path: \"/editor\",\n    title: \"Query Editor\",\n    component: <CodePage />,\n    icon: <SettingOutlined />,\n    hasSubMenu: false,\n    action: <CodeAction />,\n  },\n];\n","import React from \"react\";\nimport { matchPath } from \"react-router\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { Menu } from \"antd\";\nimport { routes } from \"../../settings/routes\";\nimport { TableConfigContext } from \"../model/TableContext\";\nimport SubMenu from \"antd/lib/menu/SubMenu\";\n\nexport default function SideBar(props: { expanded: boolean }) {\n  const { configs } = React.useContext(TableConfigContext);\n  const location = useLocation();\n  const history = useHistory();\n  const [selectedPath, setSelectedPath] = React.useState(routes[0].title);\n  const { expanded } = props;\n\n  React.useEffect(() => {\n    if (location.pathname !== routes[0].path) {\n      let route = routes.find(\n        (r) => location.pathname.includes(r.path) && r.path !== routes[0].path\n      );\n      if (route) {\n        setSelectedPath(route?.title);\n      }\n    } else {\n      setSelectedPath(routes[0].path);\n    }\n  }, [location]);\n\n  const renderSubMenu = React.useCallback(\n    (path: string) => {\n      if (path === routes[0].path) {\n        return configs.map((c, i) => (\n          <Menu.Item\n            key={c.table_name}\n            onClick={() => {\n              if (location.pathname !== routes[0].path) {\n                history.push(routes[0].path);\n              }\n              let element = document.getElementById(c.table_name);\n              element?.scrollIntoView();\n            }}\n          >\n            {c.table_name}\n          </Menu.Item>\n        ));\n      } else {\n        return [];\n      }\n    },\n    [configs]\n  );\n\n  const renderMenu = React.useCallback(() => {\n    return routes.map((r) => {\n      let subMenus = renderSubMenu(r.path);\n\n      if (!r.hasSubMenu) {\n        return (\n          <Menu.Item\n            key={r.title}\n            icon={r.icon}\n            onClick={() => history.push(r.path)}\n          >\n            {r.title}\n          </Menu.Item>\n        );\n      } else {\n        return (\n          <SubMenu\n            key={r.title}\n            title={r.title}\n            onTitleClick={() => history.push(r.path)}\n            icon={r.icon}\n          >\n            {subMenus}\n          </SubMenu>\n        );\n      }\n    });\n  }, [configs]);\n\n  return (\n    <Menu\n      theme=\"light\"\n      mode=\"inline\"\n      selectedKeys={[selectedPath]}\n      style={{ height: \"100%\" }}\n    >\n      {renderMenu()}\n    </Menu>\n  );\n}\nfunction useStyles() {\n  throw new Error(\"Function not implemented.\");\n}\n","import { type } from \"node:os\";\nimport React from \"react\";\n\ntype Role = \"Client\" | \"Server\";\n\ninterface Settings {\n  role: Role;\n  setRole(role: Role): void;\n}\n\n//@ts-ignore\nconst SettingsContext = React.createContext<Settings>({});\n\nexport default function SettingsProvider(props: any) {\n  const [role, setRoleState] = React.useState<Role>(\"Server\");\n\n  React.useEffect(() => {\n    let role = localStorage.getItem(\"role\");\n    if (role) {\n      setRoleState(role as Role);\n    }\n  }, []);\n\n  const setRole = React.useCallback((r: Role) => {\n    localStorage.setItem(\"role\", role);\n    setRoleState(role);\n  }, []);\n\n  const values: Settings = {\n    role,\n    setRole,\n  };\n\n  return (\n    <SettingsContext.Provider value={values}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Button, Card, Layout, Menu, Row } from \"antd\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport SideBar from \"./components/sider/SideBar\";\nimport { routes } from \"./settings/routes\";\nimport TableConfigProvider from \"./components/model/TableContext\";\nimport CodeProvider from \"./components/model/CodeContext\";\nimport SettingsProvider from \"./components/model/SettingsContext\";\n\nconst { Header, Sider, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  return (\n    <div style={{ overflow: \"hidden\" }}>\n      <SettingsProvider>\n        <CodeProvider>\n          <TableConfigProvider>\n            <Router>\n              <Layout style={{ height: \"100vh\", overflow: \"hidden\" }}>\n                <Card\n                  style={{ margin: 0, padding: 0 }}\n                  bodyStyle={{ padding: 0 }}\n                >\n                  <Row align=\"middle\">\n                    <div\n                      className=\"trigger\"\n                      onClick={() => setCollapsed(!collapsed)}\n                    >\n                      {collapsed ? (\n                        <MenuUnfoldOutlined />\n                      ) : (\n                        <MenuFoldOutlined />\n                      )}\n                    </div>\n                    <h1 style={{ padding: 10 }}>CodeGen</h1>\n                    <div style={{ flexGrow: 1 }}> </div>\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-action-${i}`} path={r.path} exact>\n                          {r.action}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Row>\n                </Card>\n\n                <Layout style={{ background: \"white\" }}>\n                  <Sider\n                    collapsible\n                    style={{ background: \"#fff\" }}\n                    trigger={null}\n                    collapsed={collapsed}\n                  >\n                    <SideBar expanded={!collapsed} />\n                  </Sider>\n                  <Content\n                    style={{\n                      margin: \"0px 0px\",\n                      padding: 0,\n                      minHeight: 280,\n                    }}\n                  >\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-${i}`} path={r.path} exact>\n                          {r.component}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Content>\n                </Layout>\n              </Layout>\n            </Router>\n          </TableConfigProvider>\n        </CodeProvider>\n      </SettingsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}