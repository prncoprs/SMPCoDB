{"version":3,"sources":["components/model/TableContext.tsx","components/pages/home/utils/table_structure_schema.ts","components/pages/table/InputRowTableConfigCard.tsx","settings/column_types.ts","components/pages/table/TableConfigCard.tsx","components/pages/table/TableConfigPage.tsx","components/model/utils.tsx","components/model/CodeContext.tsx","components/model/SettingsContext.tsx","components/pages/code/components/CodePanel.tsx","components/pages/code/CodePage.tsx","components/pages/code/components/TreeDisplay.tsx","components/pages/code/components/CodeAction.tsx","components/pages/settings/SettingsPage.tsx","components/pages/table/TableAction.tsx","settings/routes.tsx","components/sider/SideBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TableConfigContext","React","createContext","TableConfigProvider","props","children","useState","configs","setConfigsState","openRawConfigDialog","setOpenRawConfigDialog","useEffect","tableConfig","localStorage","getItem","JSON","parse","setItem","stringify","setConfigs","useCallback","vs","update","value","Provider","tableStructureSchema","$schema","type","items","$ref","definitions","TableConfigElement","additionalProperties","properties","data_sizes","data_paths","table_name","owner","columns","required","title","Column","column_type","name","InputRowTableConfigCard","useContext","setValue","onOpen","onClose","handleJSONEditorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","enableSchemaRequest","schemas","uri","fileMatch","schema","subTitle","extra","onClick","style","maxWidth","Link","target","href","visible","onOk","onCancel","footer","width","window","innerWidth","height","language","options","minimap","enabled","beforeMount","e","onChange","column_types","table_owner","TableConfigCard","config","index","setName","setOwner","open","setOpen","formValues","longest","Math","max","length","path_size","Array","from","map","c","size","undefined","path","i","updateTableConfig","updateConfig","filter","v","parseInt","deleteTable","Modal","confirm","content","splice","notification","success","message","placement","id","margin","shape","marginRight","DeleteOutlined","EditOutlined","initialValues","onValuesChange","_","Title","level","List","fields","add","remove","gutter","key","fieldKey","restField","display","marginBottom","xs","md","Item","rules","placeholder","span","MinusCircleOutlined","className","block","icon","PlusOutlined","Option","marginTop","TableConfigPage","loading","setLoading","location","useLocation","q","qs","search","setTimeout","table","element","document","getElementById","scrollIntoView","overflowY","sqlKeywords","keyword","desc","Utils","p","URL","process","range","model","text","tables","contents","k","toLowerCase","includes","column","toLocaleLowerCase","suggestions","push","label","kind","CompletionItemKind","Constant","documentation","insertText","toUpperCase","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","Keyword","CodeContext","CodeProvider","codeRunResults","setCodeRunResultState","isLoading","setIsLoading","setIndex","showEdit","setShowEdit","code","err","console","log","setCodeRunResults","runCode","tableConfigs","a","url","getURL","data","axios","post","sql","annotation_name","num_of_rows","resp","result","info","error","description","response","duration","deleteResultCache","forEach","SettingsContext","SettingsProvider","role","setRoleState","backend","setBackendState","values","setRole","r","setBackend","hover","completion","CodePanel","codeRunResult","editor","setEditor","dispose","handleSQLEditorWillMount","registerCompletionItemProvider","provideCompletionItems","position","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","generateSuggestions","registerHoverProvider","provideHover","getWordAtPosition","generateHover","updateCode","padding","onMount","close","overflowX","results","server_result","client_result","toLocaleUpperCase","field","rows","res","cs","slice","s","j","rowHeight","CodePage","renderPanel","TabPane","tab","addIcon","onEdit","targetKey","action","TreeDisplay","joinGraph","orientation","pathFunc","translate","y","x","nodeSize","CodeAction","Form","useForm","form","reConfigure","getFieldsValue","setFieldsValue","justify","CaretRightOutlined","trigger","BarChartOutlined","resetFields","SettingsPage","formValue","changed","TableAction","addTable","routes","component","TableOutlined","hasSubMenu","SettingOutlined","CodeOutlined","SideBar","history","useHistory","selectedPath","setSelectedPath","expanded","pathname","route","find","renderSubMenu","renderMenu","subMenus","onTitleClick","theme","mode","selectedKeys","Layout","Header","Sider","Content","App","collapsed","setCollapsed","overflow","bodyStyle","align","MenuUnfoldOutlined","MenuFoldOutlined","flexGrow","exact","background","collapsible","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ca84297.chunk.js","sourcesContent":["import React from \"react\";\nimport { TableConfig } from \"./table-config\";\n\ninterface TableConfigContext {\n  configs: TableConfig[];\n  setConfigs(configs: TableConfig[], update?: boolean): void;\n  openRawConfigDialog: boolean;\n  setOpenRawConfigDialog(v: boolean): void;\n}\n\n//@ts-ignore\nexport const TableConfigContext = React.createContext<TableConfigContext>({});\n\nexport default function TableConfigProvider(props: any) {\n  const { children } = props;\n\n  const [configs, setConfigsState] = React.useState<TableConfig[]>([]);\n  const [openRawConfigDialog, setOpenRawConfigDialog] = React.useState(false);\n\n  React.useEffect(() => {\n    let tableConfig = localStorage.getItem(\"tableStructure\");\n    if (tableConfig !== null) {\n      setConfigsState(JSON.parse(tableConfig));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"tableStructure\", JSON.stringify(configs));\n  }, [configs]);\n\n  const setConfigs = React.useCallback(\n    (vs: TableConfig[], update: boolean = true) => {\n      localStorage.setItem(\"tableStructure\", JSON.stringify(vs));\n      if (update) {\n        setConfigsState(JSON.parse(JSON.stringify(vs)));\n      }\n    },\n    [configs]\n  );\n\n  const value: TableConfigContext = {\n    configs,\n    setConfigs,\n    setOpenRawConfigDialog,\n    openRawConfigDialog,\n  };\n\n  return (\n    <TableConfigContext.Provider value={value}>\n      {children}\n    </TableConfigContext.Provider>\n  );\n}\n","export const tableStructureSchema = {\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  type: \"array\",\n  items: {\n    $ref: \"#/definitions/TableConfigElement\",\n  },\n  definitions: {\n    TableConfigElement: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        data_sizes: {\n          type: \"array\",\n          items: {\n            type: \"integer\",\n          },\n        },\n        data_paths: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        table_name: {\n          type: \"string\",\n        },\n        owner: {\n          type: \"string\",\n        },\n        columns: {\n          type: \"array\",\n          items: {\n            $ref: \"#/definitions/Column\",\n          },\n        },\n      },\n      required: [\"columns\", \"data_sizes\", \"table_name\"],\n      title: \"TableConfigElement\",\n    },\n    Column: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        column_type: {\n          type: \"string\",\n        },\n        name: {\n          type: \"string\",\n        },\n      },\n      required: [\"column_type\", \"name\"],\n      title: \"Column\",\n    },\n  },\n};\n","import React from \"react\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Button, PageHeader, Row, Typography, Modal } from \"antd\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { tableStructureSchema } from \"../home/utils/table_structure_schema\";\n\nexport default function InputRowTableConfigCard() {\n  const { setOpenRawConfigDialog, openRawConfigDialog, configs, setConfigs } =\n    React.useContext(TableConfigContext);\n\n  const [value, setValue] = React.useState(\"\");\n\n  const onOpen = React.useCallback(() => {\n    setValue(JSON.stringify(configs, null, 4));\n    setOpenRawConfigDialog(true);\n  }, [configs]);\n\n  const onClose = React.useCallback(() => {\n    setConfigs(JSON.parse(value));\n    setOpenRawConfigDialog(false);\n  }, [value]);\n\n  const handleJSONEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        enableSchemaRequest: true,\n        schemas: [\n          {\n            uri: \"https://raw.githubusercontent.com/sirily11/SECYAN-GEN/master/examples/table_config.json\",\n            fileMatch: [\"*\"],\n            schema: tableStructureSchema,\n          },\n        ],\n      });\n    },\n    [value]\n  );\n\n  return (\n    <PageHeader\n      title=\"Table Configuration\"\n      subTitle=\"Config your table's info here\"\n      extra={[\n        <Button type=\"primary\" onClick={onOpen}>\n          Set Raw Data\n        </Button>,\n      ]}\n    >\n      <Typography style={{ maxWidth: \"800px\" }}>\n        You can either use the raw Data Config Editor to modify your database\n        table's infomation, or use the GUI below to modify your table. You can\n        check this{\" \"}\n        <Typography.Link\n          target=\"_blank\"\n          href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n        >\n          Link\n        </Typography.Link>{\" \"}\n        for example table configuration.\n      </Typography>\n      <Modal\n        title=\"Raw Data Configuration\"\n        visible={openRawConfigDialog}\n        onOk={onClose}\n        onCancel={onClose}\n        footer={[<Button onClick={onClose}>Close</Button>]}\n        width={window.innerWidth * 0.8}\n      >\n        <Editor\n          height={500}\n          language=\"json\"\n          options={{ minimap: { enabled: false } }}\n          beforeMount={(e) => handleJSONEditorWillMount(e)}\n          value={value}\n          onChange={(e) => {\n            setValue(e ?? \"\");\n          }}\n        />\n      </Modal>\n    </PageHeader>\n  );\n}\n","export const column_types = [\"int\", \"string\", \"decimal\", \"date\"];\n\nexport const table_owner = [\"CLIENT\", \"SERVER\"];\n","import {\n  Button,\n  Card,\n  Input,\n  Space,\n  Form,\n  Row,\n  Col,\n  Typography,\n  Divider,\n  Select,\n  Modal,\n  notification,\n} from \"antd\";\nimport React from \"react\";\nimport { TableConfig } from \"../../model/table-config\";\nimport {\n  EditOutlined,\n  PlusOutlined,\n  MinusCircleOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { column_types, table_owner } from \"../../../settings/column_types\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport { Role } from \"../../model/SettingsContext\";\n\ninterface Props {\n  config: TableConfig;\n  index: number;\n}\n\ninterface FormValue {\n  path_size: { size: number; path: string }[];\n  columns: any[];\n}\n\nexport default function TableConfigCard(props: Props) {\n  const { config, index } = props;\n  const [name, setName] = React.useState(config.table_name);\n  const [owner, setOwner] = React.useState(config.owner);\n  const [open, setOpen] = React.useState(false);\n  const { setConfigs, configs } = React.useContext(TableConfigContext);\n\n  const formValues = React.useCallback(() => {\n    let longest = Math.max(\n      config?.data_paths?.length ?? 0,\n      config?.data_sizes?.length ?? 0\n    );\n    let path_size = Array.from(Array(longest)).map((c) => {\n      return { size: undefined, path: undefined };\n    });\n\n    for (let i = 0; i < longest; i++) {\n      if (config?.data_sizes?.length ?? 0 < i) {\n        //@ts-ignore\n        path_size[i].size = config.data_sizes[i];\n      }\n\n      if (config?.data_paths?.length ?? 0 < i) {\n        //@ts-ignore\n        path_size[i].path = config.data_paths[i];\n      }\n\n      return {\n        path_size,\n        columns: config.columns,\n      };\n    }\n  }, [config]);\n\n  const updateTableConfig = React.useCallback(() => {\n    configs[index].table_name = name;\n    configs[index].owner = owner;\n    setConfigs(configs);\n    setOpen(false);\n  }, [name, owner]);\n\n  const updateConfig = React.useCallback(\n    (value: FormValue) => {\n      let path_size = value.path_size.filter((v) => v !== undefined);\n      configs[index].data_sizes = path_size.map((v: any) => parseInt(v.size));\n      configs[index].data_paths = path_size.map((v: any) => v.path);\n      configs[index].columns = value.columns;\n      setConfigs(configs, false);\n    },\n    [config]\n  );\n\n  const deleteTable = React.useCallback(() => {\n    Modal.confirm({\n      title: \"confirm\",\n      content: \"Delete this table\",\n      onOk: () => {\n        configs.splice(index, 1);\n        setConfigs(JSON.parse(JSON.stringify(configs)));\n        notification.success({\n          message: \"Table deleted\",\n          placement: \"bottomRight\",\n        });\n      },\n    });\n  }, [config]);\n\n  return (\n    <Card\n      id={config.table_name}\n      title={`${config.table_name} - ${config.owner ?? \"Client\"}`}\n      key={config.table_name}\n      style={{ margin: 10 }}\n      extra={[\n        <Button\n          shape=\"circle\"\n          onClick={deleteTable}\n          style={{ marginRight: 10 }}\n        >\n          <DeleteOutlined />\n        </Button>,\n        <Button shape=\"circle\" onClick={() => setOpen(true)}>\n          <EditOutlined />\n        </Button>,\n      ]}\n    >\n      <Form\n        initialValues={formValues()}\n        onValuesChange={(_, v) => {\n          updateConfig(v);\n        }}\n      >\n        {/* data sizes and data paths */}\n\n        <Typography.Title level={5}>Data Sizes and Paths</Typography.Title>\n        <Form.List name=\"path_size\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={`path_size-${key}`}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                  md={12}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={10} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"size\"]}\n                        fieldKey={[fieldKey, \"size\"]}\n                        rules={[\n                          { required: true, message: \"Data Size is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data size\" type=\"number\" />\n                      </Form.Item>\n                    </Col>\n                    <Col md={12} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"path\"]}\n                        fieldKey={[fieldKey, \"path\"]}\n                        rules={[\n                          { required: true, message: \"Data Path is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data path\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => remove(name)}\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Data Path and Size\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n\n        {/* end data sizes and data paths */}\n        {/* columns */}\n        <Typography.Title level={5}>Table Columns</Typography.Title>\n        <Form.List name=\"columns\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={`column-${key}`}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={5} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"column_type\"]}\n                        fieldKey={[fieldKey, \"type\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column type is required\",\n                          },\n                        ]}\n                      >\n                        <Select>\n                          {column_types.map((c, i) => (\n                            <Select.Option value={c}>{c}</Select.Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n                    </Col>\n                    <Col md={5} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"name\"]}\n                        fieldKey={[fieldKey, \"name\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column name is required\",\n                          },\n                        ]}\n                      >\n                        <Input placeholder=\"Column Name\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined onClick={() => remove(name)} />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Column\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n        {/* end columns */}\n      </Form>\n      <Modal\n        visible={open}\n        title=\"Table name\"\n        onCancel={() => {\n          setName(config.table_name);\n          setOwner(config.owner);\n          setOpen(false);\n        }}\n        onOk={updateTableConfig}\n      >\n        <Input\n          placeholder=\"Table name\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n        <Select\n          style={{ width: \"100%\", marginTop: 20 }}\n          placeholder=\"Select Owner\"\n          value={owner}\n          onChange={(e) => setOwner(e)}\n        >\n          {table_owner.map((v) => (\n            <Select.Option value={v} key={v}>\n              {v}\n            </Select.Option>\n          ))}\n        </Select>\n      </Modal>\n    </Card>\n  );\n}\n","import { Affix, Button, notification, Row, Typography } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport InputRowTableConfigCard from \"./InputRowTableConfigCard\";\nimport TableConfigCard from \"./TableConfigCard\";\nimport qs from \"query-string\";\n\nexport default function TableConfigPage() {\n  const { configs, setConfigs } = React.useContext(TableConfigContext);\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const location = useLocation();\n\n  let q = qs.parse(location.search);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 50);\n  }, []);\n\n  React.useEffect(() => {\n    const table = q.table;\n    if (table) {\n      let element = document.getElementById(table as string);\n      element?.scrollIntoView();\n    }\n  }, [location.search, loading]);\n\n  \n  return (\n    <div style={{ overflowY: \"scroll\", height: \"100%\" }}>\n      <InputRowTableConfigCard />\n      {!loading &&\n        configs.map((c, i) => (\n          <TableConfigCard key={`config-${i}`} config={c} index={i} />\n        ))}\n\n      {/* <Affix offsetBottom={20} style={{ position: \"absolute\", right: 10 }}>\n        <Row justify=\"end\">\n          <Button\n            type=\"primary\"\n            style={{ marginRight: 20 }}\n            onClick={() => setOpen(true)}\n          >\n            Add Table\n          </Button>\n        </Row>\n      </Affix> */}\n    </div>\n  );\n}\n","import * as monaco from \"monaco-editor\";\nimport { TableConfig } from \"./table-config\";\nexport interface TableInterface {\n  table_name: string;\n  columns: ColumnInterface[];\n}\n\nexport interface ColumnInterface {\n  column_type: string;\n  name: string;\n}\n\nexport const sqlKeywords = [\n  {\n    keyword: \"select\",\n    desc: \"\",\n  },\n  {\n    keyword: \"from\",\n    desc: \"\",\n  },\n  {\n    keyword: \"where\",\n    desc: \"\",\n  },\n  {\n    keyword: \"sum\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"max\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"avg\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"count\",\n    desc: \"Aggregation function\",\n  },\n\n  {\n    keyword: \"group by\",\n    desc: \"\",\n  },\n  {\n    keyword: \"desc\",\n    desc: \"\",\n  },\n  {\n    keyword: \"limit\",\n    desc: \"\",\n  },\n  {\n    keyword: \"having\",\n    desc: \"\",\n  },\n  {\n    keyword: \"exists\",\n    desc: \"\",\n  },\n];\n\nexport class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n\n  static generateHover(\n    range: any,\n    model: any,\n    text: string,\n    tables?: TableConfig[]\n  ) {\n    if (tables) {\n      for (let k of sqlKeywords) {\n        if (text.toLowerCase().includes(k.keyword.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"SQL Built In\" }, { value: k.desc }],\n          };\n        }\n      }\n      for (let table of tables) {\n        if (text.toLowerCase().includes(table.table_name.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"Table Name\" }],\n          };\n        }\n\n        for (let column of table.columns) {\n          if (text.toLocaleLowerCase().includes(column.name.toLowerCase())) {\n            return {\n              range,\n              contents: [\n                { value: table.table_name },\n                { value: `**Type: ${column.column_type}**` },\n              ],\n            };\n          }\n        }\n      }\n    } else\n      return {\n        range,\n        contents: [],\n      };\n  }\n\n  static generateSuggestions(range: any, tables?: TableConfig[]) {\n    if (tables) {\n      let suggestions = [];\n      for (let table of tables) {\n        suggestions.push({\n          label: table.table_name,\n          kind: monaco.languages.CompletionItemKind.Constant,\n          documentation: \"\",\n          insertText: table.table_name.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n\n        for (let column of table.columns) {\n          suggestions.push({\n            label: column.name,\n            kind: monaco.languages.CompletionItemKind.Constant,\n            documentation: `${column.column_type}`,\n            insertText: column.name,\n            insertTextRules:\n              monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            range: range,\n          });\n        }\n      }\n\n      for (let k of sqlKeywords) {\n        suggestions.push({\n          label: k.keyword,\n          kind: monaco.languages.CompletionItemKind.Keyword,\n          document: k.desc,\n          insertText: k.keyword.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n      }\n\n      return suggestions;\n    } else {\n      return [];\n    }\n  }\n}\n","import { notification } from \"antd\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { CodeRunResult } from \"./code-run-result\";\nimport { TableConfig } from \"./table-config\";\nimport { Utils } from \"./utils\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\n\ninterface Code {\n  codeRunResults: CodeRunResult[];\n  setCodeRunResults(c: CodeRunResult[]): void;\n  runCode(index: number, tableConfigs: TableConfig[]): Promise<void>;\n  isLoading: boolean;\n  index: number;\n  setIndex(num: number): void;\n  showEdit: boolean;\n  setShowEdit(b: boolean): void;\n  deleteResultCache(): void;\n  // initSQLEditor(m: Monaco): void;\n}\n\n//@ts-ignore\nexport const CodeContext = React.createContext<Code>({});\n\nexport default function CodeProvider(props: any) {\n  const { children } = props;\n  const [codeRunResults, setCodeRunResultState] = React.useState<\n    CodeRunResult[]\n  >([]);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [index, setIndex] = React.useState(0);\n  const [showEdit, setShowEdit] = React.useState(false);\n\n  React.useEffect(() => {\n    let code = localStorage.getItem(\"code\");\n    if (code) {\n      try {\n        setCodeRunResultState(JSON.parse(code));\n      } catch (err) {\n        console.log(\"No Code Saved\");\n      }\n    }\n  }, []);\n\n  const setCodeRunResults = React.useCallback(\n    (c: CodeRunResult[]) => {\n      localStorage.setItem(\"code\", JSON.stringify(c));\n      setCodeRunResultState(JSON.parse(JSON.stringify(c)));\n    },\n    [codeRunResults]\n  );\n\n  const runCode = React.useCallback(\n    async (index: number, tableConfigs: TableConfig[]) => {\n      let url = Utils.getURL(\"/generate_python\");\n      let data = codeRunResults[index];\n\n      try {\n        setIsLoading(true);\n        let resp = await axios.post(url, {\n          sql: data.code,\n          annotation_name: data.annotation_name,\n          num_of_rows: data.num_of_rows,\n          table: JSON.stringify(tableConfigs),\n        });\n\n        codeRunResults[index].result = resp.data;\n\n        setCodeRunResults(codeRunResults);\n        notification.info({\n          message: \"Code results returned\",\n          placement: \"bottomRight\",\n        });\n        setIsLoading(false);\n      } catch (err) {\n        setIsLoading(false);\n        notification.error({\n          message: \"Cannot generate code\",\n          description: `${\n            err?.response?.data ?? \"Cannot connect to the backend\"\n          }`,\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n      }\n    },\n    [codeRunResults]\n  );\n\n  const deleteResultCache = React.useCallback(() => {\n    codeRunResults.forEach((c) => {\n      c.result = undefined;\n    });\n\n    setCodeRunResults(codeRunResults);\n  }, [codeRunResults]);\n\n  const value: Code = {\n    codeRunResults,\n    setCodeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setIndex,\n    showEdit,\n    setShowEdit,\n    deleteResultCache,\n  };\n\n  return <CodeContext.Provider value={value}>{children}</CodeContext.Provider>;\n}\n","import { type } from \"node:os\";\nimport React from \"react\";\n\nexport type Role = \"Client\" | \"Server\";\nexport type BackEnd = \"Default Backend\" | \"Postgres Backend\";\n\ninterface Settings {\n  role: Role;\n  setRole(role: Role): void;\n  backend: BackEnd;\n  setBackend(b: BackEnd): void;\n}\n\n//@ts-ignore\nexport const SettingsContext = React.createContext<Settings>({});\n\nexport default function SettingsProvider(props: any) {\n  const [role, setRoleState] = React.useState<Role>(\"Server\");\n  const [backend, setBackendState] = React.useState<BackEnd>(\"Default Backend\");\n\n  React.useEffect(() => {\n    let role = localStorage.getItem(\"role\");\n    let backend = localStorage.getItem(\"\");\n\n    if (role) {\n      setRoleState(role as Role);\n    }\n    if (backend) {\n      setBackendState(backend as BackEnd);\n    }\n  }, []);\n\n  const setRole = React.useCallback((r: Role) => {\n    localStorage.setItem(\"role\", r);\n    setRoleState(r);\n  }, []);\n\n  const setBackend = React.useCallback((r: BackEnd) => {\n    localStorage.setItem(\"backend\", r);\n    setBackendState(r);\n  }, []);\n\n  const values: Settings = {\n    role,\n    setRole,\n    backend,\n    setBackend,\n  };\n\n  return (\n    <SettingsContext.Provider value={values}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n","import React from \"react\";\nimport { CodeRunResult } from \"../../../model/code-run-result\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Utils } from \"../../../model/utils\";\nimport { TableConfigContext } from \"../../../model/TableContext\";\nimport { Card, Col, notification, Row, Spin, Table } from \"antd\";\n//@ts-ignore\nimport { SettingsContext } from \"../../../model/SettingsContext\";\nimport {\n  DataGrid,\n  GridColDef,\n  GridValueGetterParams,\n} from \"@material-ui/data-grid\";\ninterface Props {\n  codeRunResult: CodeRunResult;\n  index: number;\n}\n\nconst height = \"calc(100vh - 64px - 56px - 20px)\";\nconst tableHeight = \"calc(100vh - 64px - 56px - 30px)\";\nlet hover: monaco.IDisposable | undefined = undefined;\nlet completion: monaco.IDisposable | undefined = undefined;\n\nexport default function CodePanel(props: Props) {\n  const { codeRunResult, index } = props;\n  const { setCodeRunResults, codeRunResults, showEdit, setShowEdit } =\n    React.useContext(CodeContext);\n\n  const [isLoading, setIsLoading] = React.useState(true);\n  const { configs } = React.useContext(TableConfigContext);\n  const { role } = React.useContext(SettingsContext);\n  const [editor, setEditor] =\n    React.useState<monaco.editor.IStandaloneCodeEditor>();\n\n  React.useEffect(() => {\n    return () => {\n      hover?.dispose();\n      completion?.dispose();\n    };\n  }, []);\n\n  const handleSQLEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      completion = monaco.languages.registerCompletionItemProvider(\"sql\", {\n        provideCompletionItems: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordUntilPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          };\n          if (configs) {\n            return {\n              suggestions: Utils.generateSuggestions(range, configs),\n            };\n          }\n        },\n      });\n\n      hover = monaco.languages.registerHoverProvider(\"sql\", {\n        provideHover: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordAtPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word?.startColumn,\n            endColumn: word?.endColumn,\n          };\n          return Utils.generateHover(range, model, word?.word ?? \"\", configs);\n        },\n      });\n    },\n    [configs, editor]\n  );\n\n  React.useEffect(() => {\n    notification.info({\n      message: \"Loading Data\",\n      placement: \"bottomRight\",\n    });\n  }, []);\n\n  // Update editor code\n  const updateCode = React.useCallback(\n    (code: string) => {\n      codeRunResults[index].code = code;\n      setCodeRunResults(codeRunResults);\n    },\n    [codeRunResult]\n  );\n\n  // Table columns\n  const columns = () => {\n    let results: string[][] | undefined =\n      role === \"Server\"\n        ? codeRunResult.result?.server_result\n        : codeRunResult.result?.client_result;\n    if (results?.length ?? 0 > 0) {\n      return results![0].map((v) => {\n        return {\n          title: v.toLocaleUpperCase(),\n          field: v.toLowerCase(),\n          width: v.length * 20,\n        };\n      });\n    }\n    return [];\n  };\n\n  const rows = () => {\n    let res: any[] = [];\n    let results: string[][] | undefined =\n      role === \"Server\"\n        ? codeRunResult.result?.server_result\n        : codeRunResult.result?.client_result;\n    if (results) {\n      let cs = results[0]!;\n      results.slice(1).forEach((s, i) => {\n        let data: { [key: string]: any } = {\n          id: i,\n        };\n        s.forEach((c, j) => {\n          data[cs[j]] = c;\n        });\n        res.push(data);\n      });\n    }\n\n    return res;\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Row gutter={[10, 10]}>\n        <Col xs={8}>\n          <Editor\n            value={codeRunResult.code}\n            onMount={(e) => {\n              setEditor(e);\n              setIsLoading(false);\n              notification.close(\"Data Loaded\");\n            }}\n            language=\"sql\"\n            beforeMount={(e) => handleSQLEditorWillMount(e)}\n            options={{ minimap: { enabled: false } }}\n            height={height}\n            onChange={(e) => {\n              updateCode(e as string);\n            }}\n          />\n        </Col>\n        <Col\n          xs={16}\n          style={{ overflowY: \"scroll\", overflowX: \"scroll\", height: \"100%\" }}\n        >\n          <div style={{ height: tableHeight, overflowY: \"hidden\" }}>\n            {codeRunResult.result && !isLoading && (\n              <DataGrid columns={columns()} rows={rows()} rowHeight={60} />\n            )}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Affix, Button, Col, Row, Table, Tabs } from \"antd\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { Utils } from \"../../model/utils\";\nimport CodePanel from \"./components/CodePanel\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\n\nexport default function CodePage() {\n  const { codeRunResults, setCodeRunResults, setIndex } =\n    React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n\n  const renderPanel = React.useCallback(() => {\n    return codeRunResults.map((c, i) => (\n      <Tabs.TabPane tab={c.name} key={i} style={{ height: \"100%\" }}>\n        <CodePanel codeRunResult={c} index={i} />\n      </Tabs.TabPane>\n    ));\n  }, [codeRunResults]);\n\n  return (\n    <Tabs\n      type=\"editable-card\"\n      style={{ height: \"100%\" }}\n      addIcon={<PlusOutlined />}\n      onChange={(index) => {\n        setIndex(parseInt(index));\n      }}\n      onEdit={(targetKey, action) => {\n        if (action === \"add\") {\n          codeRunResults.push({\n            name: \"newResult\",\n            code: \"\",\n            num_of_rows: 100,\n            annotation_name: \"q3_annot\",\n          });\n          setCodeRunResults(codeRunResults);\n        } else {\n          codeRunResults.splice(parseInt(targetKey as string), 1);\n          setCodeRunResults(codeRunResults);\n        }\n      }}\n    >\n      {renderPanel()}\n    </Tabs>\n  );\n}\n","import React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nexport default function TreeDisplay() {\n  const { codeRunResults, index } = React.useContext(CodeContext);\n\n  const result = codeRunResults[index]?.result;\n\n  return (\n    <div style={{ height: 500, width: 1000 }}>\n      {/* {JSON.stringify(result?.joinGraph)} */}\n      {result && (\n        <Tree\n          data={result.joinGraph}\n          orientation=\"vertical\"\n          pathFunc=\"step\"\n          translate={{ y: 100, x: 400 }}\n          nodeSize={{ x: 257, y: 175 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Button, Form, Input, Row, Tooltip, Popover } from \"antd\";\nimport React from \"react\";\nimport {\n  EditOutlined,\n  CaretRightOutlined,\n  BarChartOutlined,\n} from \"@ant-design/icons\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport { TableConfigContext } from \"../../../model/TableContext\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport TreeDisplay from \"./TreeDisplay\";\n\nexport default function CodeAction() {\n  const {\n    setCodeRunResults,\n    codeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setShowEdit,\n    showEdit,\n  } = React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n  const [form] = Form.useForm();\n\n  // Rename, etc\n  const reConfigure = React.useCallback(() => {\n    let values = form.getFieldsValue();\n    codeRunResults[index].annotation_name = values.annotation_name;\n    codeRunResults[index].name = values.name;\n    codeRunResults[index].num_of_rows = parseInt(values.num_of_rows);\n    setCodeRunResults(codeRunResults);\n    setShowEdit(false);\n  }, [codeRunResults, index]);\n\n  React.useEffect(() => {\n    form.setFieldsValue(codeRunResults[index]);\n  }, [showEdit]);\n\n  return (\n    <Row justify=\"end\" style={{ marginRight: 20 }}>\n      <Tooltip title=\"Run Code\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          loading={isLoading}\n          onClick={async () => {\n            await runCode(index, configs);\n          }}\n        >\n          <CaretRightOutlined />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Rename\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          onClick={() => {\n            setShowEdit(true);\n          }}\n        >\n          <EditOutlined />\n        </Button>\n      </Tooltip>\n      {codeRunResults[index]?.result && (\n        <Popover\n          content={<TreeDisplay />}\n          placement=\"leftBottom\"\n          trigger=\"click\"\n        >\n          <Tooltip title=\"Join Tree\">\n            <Button\n              shape=\"round\"\n              size=\"large\"\n              style={{ marginRight: 10 }}\n              onClick={() => {}}\n            >\n              <BarChartOutlined />\n            </Button>\n          </Tooltip>\n        </Popover>\n      )}\n      <Modal\n        title=\"Configuration\"\n        visible={showEdit}\n        onOk={reConfigure}\n        onCancel={() => {\n          form.resetFields();\n          setShowEdit(false);\n        }}\n      >\n        <Form initialValues={codeRunResults[index]} form={form}>\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input placeholder=\"Name\" />\n          </Form.Item>\n          <Form.Item name=\"num_of_rows\" label=\"Number of rows\">\n            <Input placeholder=\"Num of rows\" type=\"number\" />\n          </Form.Item>\n          <Form.Item name=\"annotation_name\" label=\"Annotation Name\">\n            <Input placeholder=\"Annotation Name\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Row>\n  );\n}\n","import { Card, Typography, Form, Select, Button, message } from \"antd\";\nimport React from \"react\";\nimport { BackEnd, Role, SettingsContext } from \"../../model/SettingsContext\";\nimport { useLocation } from \"react-router\";\nimport { CodeContext } from \"../../model/CodeContext\";\n\ninterface FormValue {\n  role: Role;\n  backend: BackEnd;\n}\n\nexport default function SettingsPage() {\n  const { role, setRole, backend, setBackend } =\n    React.useContext(SettingsContext);\n\n  const { deleteResultCache } = React.useContext(CodeContext);\n\n  const formValue: FormValue = {\n    role: role,\n    backend: backend,\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Typography.Title level={3}>Settings</Typography.Title>\n      <Card>\n        <Typography.Title level={5}>General Settings</Typography.Title>\n        <Form\n          initialValues={formValue}\n          onValuesChange={(changed) => {\n            if (changed.role) {\n              setRole(changed.role);\n            }\n            if (changed.backend) {\n              setBackend(changed.backend);\n            }\n          }}\n        >\n          <Form.Item label=\"Role\" name=\"role\">\n            <Select>\n              {[\"Client\", \"Server\"].map((v, i) => (\n                <Select.Option value={v} key={`role-${i}`}>\n                  {v}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Backend\"\n            name=\"backend\"\n            extra=\"This will only affect the c++ code generator\"\n          >\n            <Select>\n              {[\"Default Backend\", \"Postgres Backend\"].map((v, i) => (\n                <Select.Option value={v} key={`role-${i}`}>\n                  {v}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n        </Form>\n      </Card>\n      <Card title=\"Delete Data\">\n        <Typography.Title level={5}>Stored results</Typography.Title>\n        <Button\n          onClick={() => {\n            deleteResultCache();\n            message.success(\"Delete cache successfully\");\n          }}\n        >\n          Delete\n        </Button>\n      </Card>\n    </div>\n  );\n}\n","import { Button, Modal, notification, Tooltip, Typography } from \"antd\";\nimport React from \"react\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nexport default function TableAction() {\n  const [open, setOpen] = React.useState(false);\n  const { configs, setConfigs } = React.useContext(TableConfigContext);\n\n  const addTable = React.useCallback(() => {\n    configs.push({\n      table_name: \"table\",\n      data_sizes: [],\n      data_paths: [],\n      columns: [],\n      owner: \"Server\",\n    });\n    setConfigs(configs);\n    setOpen(false);\n    notification.success({\n      message: \"Added a new table\",\n      placement: \"bottomRight\",\n    });\n  }, [configs]);\n\n  return (\n    <div>\n      <Tooltip title=\"Create a new table\">\n        <Button\n          shape=\"round\"\n          style={{ marginRight: 20 }}\n          onClick={() => setOpen(true)}\n        >\n          <PlusOutlined />\n        </Button>\n      </Tooltip>\n      <Modal\n        visible={open}\n        title=\"Add New Table\"\n        onOk={addTable}\n        onCancel={() => {\n          setOpen(false);\n        }}\n      >\n        <Typography>Create a empty table?</Typography>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  TableOutlined,\n  SettingOutlined,\n  CodeOutlined,\n} from \"@ant-design/icons\";\nimport TableConfigPage from \"../components/pages/table/TableConfigPage\";\nimport CodePage from \"../components/pages/code/CodePage\";\nimport CodeAction from \"../components/pages/code/components/CodeAction\";\nimport SettingsPage from \"../components/pages/settings/SettingsPage\";\nimport TableAction from \"../components/pages/table/TableAction\";\n\ninterface Route {\n  path: string;\n  component: JSX.Element;\n  title: string;\n  icon: JSX.Element;\n  hasSubMenu: boolean;\n  action?: JSX.Element;\n}\n\nexport const routes: Route[] = [\n  {\n    path: \"/\",\n    title: \"Table Config\",\n    component: <TableConfigPage />,\n    icon: <TableOutlined />,\n    action: <TableAction />,\n    hasSubMenu: true,\n  },\n  {\n    path: \"/settings\",\n    title: \"Settings\",\n    component: <SettingsPage />,\n    icon: <SettingOutlined />,\n    hasSubMenu: false,\n  },\n  {\n    path: \"/editor\",\n    title: \"Query Editor\",\n    component: <CodePage />,\n    icon: <CodeOutlined />,\n    hasSubMenu: false,\n    action: <CodeAction />,\n  },\n];\n","import React from \"react\";\nimport { matchPath } from \"react-router\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { Menu } from \"antd\";\nimport { routes } from \"../../settings/routes\";\nimport { TableConfigContext } from \"../model/TableContext\";\nimport SubMenu from \"antd/lib/menu/SubMenu\";\nimport qs from \"query-string\";\n\nexport default function SideBar(props: { expanded: boolean }) {\n  const { configs } = React.useContext(TableConfigContext);\n  const location = useLocation();\n  const history = useHistory();\n  const [selectedPath, setSelectedPath] = React.useState(routes[0].title);\n  const { expanded } = props;\n  const table = qs.parse(location.search).table;\n\n  React.useEffect(() => {\n    if (location.pathname !== routes[0].path) {\n      let route = routes.find(\n        (r) => location.pathname.includes(r.path) && r.path !== routes[0].path\n      );\n      if (route) {\n        setSelectedPath(route?.title);\n      }\n    } else {\n      setSelectedPath(routes[0].path);\n    }\n  }, [location]);\n\n  const renderSubMenu = React.useCallback(\n    (path: string) => {\n      if (path === routes[0].path) {\n        return configs.map((c, i) => (\n          <Menu.Item\n            key={c.table_name}\n            onClick={() => {\n              history.push(`${routes[0].path}?table=${c.table_name}`);\n            }}\n          >\n            {c.table_name}\n          </Menu.Item>\n        ));\n      } else {\n        return [];\n      }\n    },\n    [configs]\n  );\n\n  const renderMenu = React.useCallback(() => {\n    return routes.map((r) => {\n      let subMenus = renderSubMenu(r.path);\n\n      if (!r.hasSubMenu) {\n        return (\n          <Menu.Item\n            key={r.title}\n            icon={r.icon}\n            onClick={() => history.push(r.path)}\n          >\n            {r.title}\n          </Menu.Item>\n        );\n      } else {\n        return (\n          <SubMenu\n            key={r.title}\n            title={r.title}\n            onTitleClick={() => history.push(r.path)}\n            icon={r.icon}\n          >\n            {subMenus}\n          </SubMenu>\n        );\n      }\n    });\n  }, [configs]);\n\n  return (\n    <Menu\n      theme=\"light\"\n      mode=\"inline\"\n      selectedKeys={table === null ? [selectedPath] : [table as string]}\n      style={{ height: \"100%\" }}\n    >\n      {renderMenu()}\n    </Menu>\n  );\n}\nfunction useStyles() {\n  throw new Error(\"Function not implemented.\");\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Button, Card, Layout, Menu, Row } from \"antd\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport SideBar from \"./components/sider/SideBar\";\nimport { routes } from \"./settings/routes\";\nimport TableConfigProvider from \"./components/model/TableContext\";\nimport CodeProvider from \"./components/model/CodeContext\";\nimport SettingsProvider from \"./components/model/SettingsContext\";\n\nconst { Header, Sider, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  return (\n    <div style={{ overflow: \"hidden\" }}>\n      <SettingsProvider>\n        <CodeProvider>\n          <TableConfigProvider>\n            <Router>\n              <Layout style={{ height: \"100vh\", overflow: \"hidden\" }}>\n                <Card\n                  style={{ margin: 0, padding: 0 }}\n                  bodyStyle={{ padding: 0 }}\n                >\n                  <Row align=\"middle\">\n                    <div\n                      className=\"trigger\"\n                      onClick={() => setCollapsed(!collapsed)}\n                    >\n                      {collapsed ? (\n                        <MenuUnfoldOutlined />\n                      ) : (\n                        <MenuFoldOutlined />\n                      )}\n                    </div>\n                    <h1 style={{ padding: 10 }}>CodeGen</h1>\n                    <div style={{ flexGrow: 1 }}> </div>\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-action-${i}`} path={r.path} exact>\n                          {r.action}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Row>\n                </Card>\n\n                <Layout style={{ background: \"white\" }}>\n                  <Sider\n                    collapsible\n                    style={{ background: \"#fff\" }}\n                    trigger={null}\n                    collapsed={collapsed}\n                  >\n                    <SideBar expanded={!collapsed} />\n                  </Sider>\n                  <Content\n                    style={{\n                      margin: \"0px 0px\",\n                      padding: 0,\n                      minHeight: 280,\n                    }}\n                  >\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-${i}`} path={r.path} exact>\n                          {r.component}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Content>\n                </Layout>\n              </Layout>\n            </Router>\n          </TableConfigProvider>\n        </CodeProvider>\n      </SettingsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}