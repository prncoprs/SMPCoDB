{"version":3,"sources":["components/model/utils.tsx","components/model/CodeContext.tsx","components/pages/home/component/TreeDisplay.tsx","components/pages/home/component/ErrorTablesDisplay.tsx","components/pages/home/component/CodeDisplay.tsx","components/pages/home/component/Header.tsx","components/pages/home/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Utils","p","URL","process","href","CodeProvider","props","setFunctionName","name","setState","functionName","setDatabase","databaseName","setBackend","end","backend","localStorage","setItem","post","a","result","undefined","url","getURL","Axios","sql","state","code","table","tableStructure","resp","data","postDB","getItem","createDB","database","setCode","window","setTable","dbName","this","CodeContext","Provider","value","children","Component","context","React","createContext","TreeDisplay","useContext","style","height","width","joinGraph","orientation","pathFunc","translate","y","x","nodeSize","ErrorTablesDisplay","level","errorTables","map","e","Title","Typography","Paragraph","Text","Link","CodeDisplay","useState","copied","setCopied","useEffect","overflow","position","top","right","gutter","onClick","navigator","clipboard","writeText","content","placement","trigger","isFreeConnex","type","marginBottom","message","defaultProps","language","theme","className","tokens","getLineProps","getTokenProps","line","i","key","token","Option","Select","Header","show","setShow","setCreateDB","setDBName","Form","useForm","select","onChange","v","extra","title","visible","onCancel","onOk","options","minimap","enabled","target","checked","placeholder","TabPane","Tabs","HomePage","innerHeight","setHeight","isLoading","setIsLoading","addEventListener","padding","span","defaultActiveKey","tab","justifyContent","marginTop","loading","length","alert","notification","info","error","description","response","duration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.becb00eb.chunk.js","sourcesContent":["export class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n}\n","/** @format */\n\nimport React, { Component } from \"react\";\nimport { Utils } from \"./utils\";\nimport Axios from \"axios\";\n\ninterface Result {\n  code: string;\n  joinGraph: any;\n  isFreeConnex: boolean;\n  errorTables: string[];\n}\n\ninterface CodeContextState {\n  code?: string;\n  tableStructure?: string;\n  result?: Result;\n  backend: string;\n  databaseName?: string;\n  functionName?: string;\n  setFunctionName(name: string): void;\n  setBackend(backend: string): void;\n  post(): Promise<void>;\n  postDB(): Promise<void>;\n  setCode(code: string): void;\n  setDatabase(name?: string): void;\n  setTable(table: string): void;\n}\n\ninterface CodeProps {}\n\nexport class CodeProvider extends Component<CodeProps, CodeContextState> {\n  constructor(props: CodeProps) {\n    super(props);\n    let backend = localStorage.getItem(\"backend\") ?? \"python\";\n    let createDB = localStorage.getItem(\"createDB\") === \"true\" ? true : false;\n    let dbName = createDB\n      ? localStorage.getItem(\"dbName\") ?? undefined\n      : undefined;\n\n    this.state = {\n      setCode: this.setCode,\n      setBackend: this.setBackend,\n      backend: backend,\n      setTable: this.setTable,\n      post: this.post,\n      setDatabase: this.setDatabase,\n      postDB: this.postDB,\n      setFunctionName: this.setFunctionName,\n      databaseName: dbName,\n    };\n  }\n\n  componentDidMount() {\n    let code = window.localStorage.getItem(\"code\");\n    let tableStructure = window.localStorage.getItem(\"tableStructure\");\n    this.setState({\n      code: code ?? \"\",\n      tableStructure: tableStructure ?? \"\",\n    });\n  }\n\n  setFunctionName = (name: string) => {\n    this.setState({ functionName: name });\n  };\n\n  setDatabase = (name?: string) => {\n    this.setState({ databaseName: name });\n  };\n\n  setBackend = (end: string) => {\n    this.setState({ backend: end });\n    localStorage.setItem(\"backend\", end);\n  };\n\n  /**\n   * Post request and update generated code\n   */\n  post = async (): Promise<void> => {\n    this.setState({ result: undefined });\n    let url = Utils.getURL(\"generate\");\n    let resp = await Axios.post<Result>(url, {\n      sql: this.state.code,\n      table: this.state.tableStructure,\n      functionName: this.state.functionName,\n    });\n    this.setState({ result: resp.data });\n  };\n\n  /**\n   * Post request using db execution plan\n   */\n  postDB = async (): Promise<void> => {\n    this.setState({ result: undefined });\n    let url = Utils.getURL(\"generate_db\");\n    if (localStorage.getItem(\"createDB\") === \"true\") {\n      await this.createDB();\n    }\n    let resp = await Axios.post<Result>(url, {\n      sql: this.state.code,\n      table: this.state.tableStructure,\n      database: this.state.databaseName,\n      functionName: this.state.functionName,\n    });\n    this.setState({ result: resp.data });\n  };\n\n  createDB = async (): Promise<void> => {\n    let code = localStorage.getItem(\"createScript\");\n    let url = Utils.getURL(\"create_db\");\n    await Axios.post(url, { data: code });\n  };\n\n  setCode = (code: string) => {\n    this.setState({ code });\n    window.localStorage.setItem(\"code\", code);\n  };\n\n  setTable = (tableStructure: string) => {\n    this.setState({ tableStructure });\n    window.localStorage.setItem(\"tableStructure\", tableStructure);\n  };\n\n  render() {\n    return (\n      <CodeContext.Provider value={this.state}>\n        {this.props.children}\n      </CodeContext.Provider>\n    );\n  }\n}\n\n//@ts-ignore\nconst context: CodeContextState = {};\n\nexport const CodeContext = React.createContext(context);\n","import React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport Tree from \"react-d3-tree\";\n\nexport default function TreeDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <div style={{ height: 500, width: 1000 }}>\n      {/* {JSON.stringify(result?.joinGraph)} */}\n      {result && (\n        <Tree\n          data={result.joinGraph}\n          orientation=\"vertical\"\n          pathFunc=\"step\"\n          translate={{ y: 100, x: 400 }}\n          nodeSize={{ x: 257, y: 175 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Typography } from \"antd\";\nimport Paragraph from \"antd/lib/typography/Paragraph\";\nimport Title from \"antd/lib/typography/Title\";\nimport React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nexport default function ErrorTablesDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <Typography>\n      <Title level={5}>Table with errors</Title>\n      <ul>\n        {result?.errorTables.map((e) => (\n          <li key={e}>\n            <Paragraph>{e}</Paragraph>\n          </li>\n        ))}\n      </ul>\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport {\n  Affix,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Popover,\n  Row,\n  Typography,\n} from \"antd\";\nimport theme from \"prism-react-renderer/themes/github\";\nimport TreeDisplay from \"./TreeDisplay\";\nimport ErrorTablesDisplay from \"./ErrorTablesDisplay\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nexport default function CodeDisplay() {\n  const { result } = React.useContext(CodeContext);\n  const [copied, setCopied] = React.useState(false);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    setCopied(false);\n  }, [result]);\n\n  return (\n    <Card style={{ width: \"100%\", height: \"90vh\", overflow: \"scroll\" }}>\n      <Affix style={{ position: \"fixed\", top: 110, right: 40 }}>\n        <Row gutter={[10, 10]}>\n          <Col>\n            <Button\n              onClick={() => {\n                navigator.clipboard.writeText(result?.code ?? \"\");\n                setCopied(true);\n              }}\n            >\n              {copied ? \"Copied\" : \"Copy\"}\n            </Button>\n          </Col>\n          <Col>\n            <Popover\n              content={<TreeDisplay />}\n              placement=\"leftBottom\"\n              trigger=\"click\"\n            >\n              <Button>Show Join Tree</Button>\n            </Popover>\n          </Col>\n        </Row>\n      </Affix>\n      <Typography>\n        <Title>Result</Title>\n      </Typography>\n      {result?.isFreeConnex === false && (\n        <Popover content={<ErrorTablesDisplay />}>\n          <Alert\n            type=\"error\"\n            style={{ marginBottom: 10 }}\n            message={`Cannot auto generate a free connex join tree from query. Check the join tree and reorder your join statement.`}\n          />\n        </Popover>\n      )}\n      <Highlight\n        {...defaultProps}\n        code={result!.code}\n        language=\"cpp\"\n        theme={theme}\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </Card>\n  );\n}\n","import Editor from \"@monaco-editor/react\";\nimport { Button, PageHeader, Select, Form, Input } from \"antd\";\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nconst { Option } = Select;\n\nexport default function Header() {\n  const [show, setShow] = React.useState(false);\n  const [code, setCode] = React.useState(\"\");\n  const [createDB, setCreateDB] = React.useState(false);\n  const [dbName, setDBName] = React.useState(\"\");\n  const [form] = Form.useForm();\n  const { setBackend, backend, setDatabase } = React.useContext(CodeContext);\n\n  const onSettingsClick = () => {\n    setCode(localStorage.getItem(\"createScript\") ?? \"\");\n    setCreateDB(localStorage.getItem(\"createDB\") === \"true\" ? true : false);\n    setDBName(localStorage.getItem(\"dbName\") ?? \"\");\n    setShow(true);\n  };\n\n  const onSubmit = () => {\n    localStorage.setItem(\"createScript\", code);\n    localStorage.setItem(\"createDB\", createDB === true ? \"true\" : \"false\");\n    localStorage.setItem(\"dbName\", dbName);\n    if (!createDB) {\n      setDatabase(dbName);\n    } else {\n      setDatabase(undefined);\n    }\n    setShow(false);\n  };\n\n  const select = (\n    <Select\n      value={backend}\n      style={{ width: 200 }}\n      onChange={(v) => setBackend(v)}\n    >\n      <Option value={\"python\"}>Use Default Backend</Option>\n      <Option value={\"db\"}>Use Query Plan</Option>\n    </Select>\n  );\n  const extra =\n    backend == \"python\"\n      ? [select]\n      : [\n          select,\n          <Button type=\"primary\" onClick={onSettingsClick}>\n            Settings\n          </Button>,\n        ];\n\n  return (\n    <div>\n      <PageHeader title=\"CodeGen\" extra={extra} />\n\n      <Modal\n        visible={show}\n        title=\"Database settings\"\n        onCancel={() => setShow(false)}\n        onOk={() => {\n          onSubmit();\n        }}\n      >\n        {createDB && (\n          <div style={{ height: 500 }}>\n            <Editor\n              value={code}\n              options={{ minimap: { enabled: false } }}\n              onChange={(v) => setCode(v ?? \"\")}\n              language=\"sql\"\n            />\n          </div>\n        )}\n        <Checkbox\n          value={createDB}\n          onChange={(v) => {\n            setCreateDB(v.target.checked);\n          }}\n        >\n          Create database\n        </Checkbox>\n        {createDB}\n        {!createDB && (\n          <Input\n            placeholder=\"Database Name\"\n            value={dbName}\n            onChange={(e) => setDBName(e.target.value)}\n          />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","import {\n  Button,\n  Card,\n  Col,\n  Input,\n  notification,\n  PageHeader,\n  Row,\n  Select,\n  Tabs,\n  Typography,\n} from \"antd\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport Editor from \"@monaco-editor/react\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport React from \"react\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport CodeDisplay from \"./component/CodeDisplay\";\nimport Header from \"./component/Header\";\n\nconst { TabPane } = Tabs;\n\nconst { Link } = Typography;\n\nexport default function HomePage() {\n  const [height, setHeight] = React.useState(window.innerHeight);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setHeight(window.innerHeight);\n    });\n  }, []);\n\n  const {\n    setCode,\n    setTable,\n    code,\n    tableStructure,\n    result,\n    post,\n    postDB,\n    backend,\n    functionName,\n    setFunctionName,\n  } = React.useContext(CodeContext);\n\n  return (\n    <Layout style={{ height: \"100vh\", overflow: \"hidden\", padding: 10 }}>\n      <Header />\n      <Content style={{ height: \"100%\" }}>\n        <Row style={{ height: \"80%\" }} gutter={[16, 10]}>\n          <Col span={8}>\n            <Card>\n              <Tabs defaultActiveKey=\"0\" onChange={() => {}}>\n                <TabPane tab=\"Function Info\" key=\"0\">\n                  <Input\n                    value={functionName}\n                    placeholder=\"Function Name\"\n                    onChange={(e) => {\n                      setFunctionName(e.target.value);\n                    }}\n                  />\n                </TabPane>\n                <TabPane tab=\"SQL Statement\" key=\"1\">\n                  <Editor\n                    height={height - 300}\n                    language=\"sql\"\n                    value={code}\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setCode(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n                <TabPane tab=\"Table structure\" key=\"2\">\n                  <Typography>\n                    <Link\n                      target=\"_blank\"\n                      href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n                    >\n                      Example Table Structure\n                    </Link>\n                  </Typography>\n                  <Editor\n                    height={height - 300}\n                    value={tableStructure}\n                    language=\"json\"\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setTable(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n              </Tabs>\n              <Row style={{ justifyContent: \"flex-end\", marginTop: 10 }}>\n                <Button\n                  type=\"primary\"\n                  loading={isLoading}\n                  onClick={async () => {\n                    setIsLoading(true);\n                    if (code?.length === 0 || tableStructure?.length === 0) {\n                      window.alert(\"Invaild Input\");\n                      setIsLoading(false);\n                      return;\n                    }\n                    try {\n                      if (backend == \"python\") {\n                        await post();\n                      } else {\n                        await postDB();\n                      }\n                      notification.info({\n                        message: \"Code generated\",\n                      });\n                    } catch (err) {\n                      notification.error({\n                        message: \"Cannot generate code\",\n                        description: `${err?.response?.data}`,\n                        duration: 5,\n                      });\n                    } finally {\n                      setIsLoading(false);\n                    }\n                  }}\n                >\n                  Convert\n                </Button>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={16}>{result && <CodeDisplay />}</Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport { CodeProvider } from './components/model/CodeContext';\nimport HomePage from './components/pages/home/HomePage';\n\nfunction App() {\n  return (\n    <CodeProvider>\n      <HomePage />\n    </CodeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}