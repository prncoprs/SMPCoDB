{"version":3,"sources":["settings/api_routes.ts","settings/localstorage_keyconfig.ts","components/model/utils/utils.tsx","components/model/TableContext.tsx","components/model/table_structure_schema.ts","components/pages/table/InputRowTableConfigCard.tsx","settings/column_types.ts","tests/data/test_id.tsx","components/pages/table/TableConfigCard.tsx","components/pages/table/TableConfigPage.tsx","components/model/CodeContext.tsx","components/model/SettingsContext.tsx","components/model/utils/editorUtils.tsx","components/pages/code/components/CodePanel.tsx","components/pages/code/CodePage.tsx","components/pages/code/components/TreeDisplay.tsx","components/pages/code/components/CodeAction.tsx","components/pages/settings/SettingsPage.tsx","components/pages/table/TableAction.tsx","settings/routes.tsx","components/sider/SideBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiRoutes","localStorageKeyConfig","sqlKeywords","keyword","desc","Utils","p","URL","process","href","range","model","text","tables","contents","k","toLowerCase","includes","value","table","table_name","columns","column","toLocaleLowerCase","name","column_type","TableConfigContext","React","createContext","TableConfigProvider","props","children","useState","configs","setConfigsState","openRawConfigDialog","setOpenRawConfigDialog","useEffect","tableConfig","localStorage","getItem","JSON","parse","setItem","stringify","setConfigs","useCallback","vs","update","fetchConfigs","a","url","getURL","axios","get","resp","data","message","success","notification","error","description","response","duration","placement","Provider","tableStructureSchema","$schema","type","items","$ref","definitions","TableConfigElement","additionalProperties","properties","data_sizes","data_paths","annotations","owner","required","title","Column","InputRowTableConfigCard","useContext","setValue","onOpen","onClose","handleJSONEditorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","enableSchemaRequest","schemas","uri","fileMatch","schema","subTitle","extra","onClick","style","maxWidth","Link","target","visible","onOk","onCancel","footer","width","window","innerWidth","height","language","options","minimap","enabled","beforeMount","e","onChange","column_types","table_owner","test_id_config","testCardPathId","testCardSizeId","TableConfigCard","config","index","setName","setOwner","open","setOpen","formValues","map","v","annotation","updateTableConfig","updateConfig","console","log","filter","undefined","deleteTable","Modal","confirm","content","splice","id","margin","shape","marginRight","DeleteOutlined","EditOutlined","bordered","Item","label","data-testid","marginTop","initialValues","onValuesChange","_","Title","level","List","fields","add","remove","gutter","key","fieldKey","restField","display","marginBottom","xs","md","rules","c","i","Option","placeholder","span","MinusCircleOutlined","block","icon","PlusOutlined","v4","TableConfigPage","loading","setLoading","location","useLocation","q","qs","search","setTimeout","element","document","getElementById","scrollIntoView","overflowY","CodeContext","CodeProvider","codeRunResults","setCodeRunResultState","isLoading","setIsLoading","setIndex","showEdit","setShowEdit","code","err","setCodeRunResults","runCode","tableConfigs","post","sql","annotation_name","num_of_rows","result","info","deleteResultCache","forEach","SettingsContext","SettingsProvider","loaded","setLoaded","role","setRoleState","backend","setBackendState","datadir","setDatadirState","isDownloading","setIsDownloading","setDatadir","r","setRole","setBackend","downloadData","output_dir","values","EditorUtils","suggestions","push","kind","CompletionItemKind","Constant","documentation","insertText","toUpperCase","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","Keyword","hover","completion","CodePanel","codeRunResult","editor","setEditor","handleSQLEditorWillMount","dispose","registerCompletionItemProvider","provideCompletionItems","position","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","generateSuggestions","registerHoverProvider","provideHover","getWordAtPosition","generateHover","updateCode","padding","onMount","close","overflowX","results","server_result","client_result","length","toLocaleUpperCase","field","rows","res","cs","slice","s","j","rowHeight","CodePage","renderPanel","TabPane","tab","addIcon","parseInt","onEdit","targetKey","action","TreeDisplay","joinGraph","orientation","pathFunc","translate","y","x","nodeSize","CodeAction","Form","useForm","form","reConfigure","getFieldsValue","setFieldsValue","justify","size","CaretRightOutlined","UserSwitchOutlined","trigger","BarChartOutlined","resetFields","SettingsPage","formValue","settings","changed","help","Meta","newConfig","TableAction","addTable","ReloadOutlined","routes","path","component","TableOutlined","hasSubMenu","SettingOutlined","CodeOutlined","SideBar","history","useHistory","selectedPath","setSelectedPath","expanded","pathname","route","find","renderSubMenu","renderMenu","subMenus","onTitleClick","theme","mode","selectedKeys","Layout","Header","Sider","Content","App","collapsed","setCollapsed","overflow","bodyStyle","align","className","MenuUnfoldOutlined","MenuFoldOutlined","flexGrow","exact","background","collapsible","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d585935b.chunk.js","sourcesContent":["/**\n * This file contains routes for api call\n *\n */\n\nexport const apiRoutes = {\n  fetchTableSchemaRoute: \"/schema\",\n  downloadDataRoute: \"/download_data\",\n  runPythonCodeRoute: \"/generate_python\",\n};\n","export const localStorageKeyConfig = {\n  codeResultKey: \"code\",\n  roleKey: \"role\",\n  datadirKey: \"datadir\",\n  backendKey: \"backend\",\n  tableStructureKey: \"tableStructure\",\n};\n","import { TableConfig } from \"../table-config\";\nexport interface TableInterface {\n  table_name: string;\n  columns: ColumnInterface[];\n}\n\nexport interface ColumnInterface {\n  column_type: string;\n  name: string;\n}\n\nexport const sqlKeywords = [\n  {\n    keyword: \"select\",\n    desc: \"\",\n  },\n  {\n    keyword: \"from\",\n    desc: \"\",\n  },\n  {\n    keyword: \"where\",\n    desc: \"\",\n  },\n  {\n    keyword: \"sum\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"max\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"avg\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"count\",\n    desc: \"Aggregation function\",\n  },\n\n  {\n    keyword: \"group by\",\n    desc: \"\",\n  },\n  {\n    keyword: \"desc\",\n    desc: \"\",\n  },\n  {\n    keyword: \"limit\",\n    desc: \"\",\n  },\n  {\n    keyword: \"having\",\n    desc: \"\",\n  },\n  {\n    keyword: \"exists\",\n    desc: \"\",\n  },\n];\n\nexport class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n\n  static generateHover(\n    range: any,\n    model: any,\n    text: string,\n    tables?: TableConfig[]\n  ) {\n    if (tables) {\n      for (let k of sqlKeywords) {\n        if (text.toLowerCase().includes(k.keyword.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"SQL Built In\" }, { value: k.desc }],\n          };\n        }\n      }\n      for (let table of tables) {\n        if (text.toLowerCase().includes(table.table_name.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"Table Name\" }],\n          };\n        }\n\n        for (let column of table.columns) {\n          if (text.toLocaleLowerCase().includes(column.name.toLowerCase())) {\n            return {\n              range,\n              contents: [\n                { value: table.table_name },\n                { value: `**Type: ${column.column_type}**` },\n              ],\n            };\n          }\n        }\n      }\n    } else\n      return {\n        range,\n        contents: [],\n      };\n  }\n}\n","import { message, notification } from \"antd\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { apiRoutes } from \"../../settings/api_routes\";\nimport { localStorageKeyConfig } from \"../../settings/localstorage_keyconfig\";\nimport { TableConfig } from \"./table-config\";\nimport { Utils } from \"./utils/utils\";\n\ninterface TableConfigContext {\n  configs: TableConfig[];\n  setConfigs(configs: TableConfig[], update?: boolean): void;\n  openRawConfigDialog: boolean;\n  setOpenRawConfigDialog(v: boolean): void;\n  fetchConfigs(): Promise<void>;\n}\n\n//@ts-ignore\nexport const TableConfigContext = React.createContext<TableConfigContext>({});\n\nexport default function TableConfigProvider(props: any) {\n  const { children } = props;\n\n  const [configs, setConfigsState] = React.useState<TableConfig[]>([]);\n  const [openRawConfigDialog, setOpenRawConfigDialog] = React.useState(false);\n\n  React.useEffect(() => {\n    let tableConfig = localStorage.getItem(\n      localStorageKeyConfig.tableStructureKey\n    );\n    if (tableConfig !== null) {\n      setConfigsState(JSON.parse(tableConfig));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\n      localStorageKeyConfig.tableStructureKey,\n      JSON.stringify(configs)\n    );\n  }, [configs]);\n\n  const setConfigs = React.useCallback(\n    (vs: TableConfig[], update: boolean = true) => {\n      localStorage.setItem(\n        localStorageKeyConfig.tableStructureKey,\n        JSON.stringify(vs)\n      );\n      if (update) {\n        setConfigsState(JSON.parse(JSON.stringify(vs)));\n      }\n    },\n    [configs]\n  );\n\n  const fetchConfigs = React.useCallback(async () => {\n    try {\n      let url = Utils.getURL(apiRoutes.fetchTableSchemaRoute);\n      let resp = await axios.get(url);\n      setConfigs(resp.data);\n      message.success(\"Tables are updated\");\n    } catch (err) {\n      notification.error({\n        message: \"Cannot fetch table configs\",\n        description: `${\n          err?.response?.data ?? \"Cannot connect to the backend\"\n        }`,\n        duration: 5,\n        placement: \"bottomRight\",\n      });\n    }\n  }, []);\n\n  const value: TableConfigContext = {\n    configs,\n    setConfigs,\n    setOpenRawConfigDialog,\n    openRawConfigDialog,\n    fetchConfigs,\n  };\n\n  return (\n    <TableConfigContext.Provider value={value}>\n      {children}\n    </TableConfigContext.Provider>\n  );\n}\n","export const tableStructureSchema = {\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  type: \"array\",\n  items: {\n    $ref: \"#/definitions/TableConfigElement\",\n  },\n  definitions: {\n    TableConfigElement: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        data_sizes: {\n          type: \"array\",\n          items: {\n            type: \"integer\",\n          },\n        },\n        data_paths: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        annotations: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        table_name: {\n          type: \"string\",\n        },\n        owner: {\n          type: \"string\",\n        },\n        columns: {\n          type: \"array\",\n          items: {\n            $ref: \"#/definitions/Column\",\n          },\n        },\n      },\n      required: [\n        \"columns\",\n        \"data_sizes\",\n        \"table_name\",\n        \"data_paths\",\n        \"annotations\",\n      ],\n      title: \"TableConfigElement\",\n    },\n    Column: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        column_type: {\n          type: \"string\",\n        },\n        name: {\n          type: \"string\",\n        },\n      },\n      required: [\"column_type\", \"name\"],\n      title: \"Column\",\n    },\n  },\n};\n","import React from \"react\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Button, PageHeader, Row, Typography, Modal } from \"antd\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { tableStructureSchema } from \"../../model/table_structure_schema\";\n\nexport default function InputRowTableConfigCard() {\n  const { setOpenRawConfigDialog, openRawConfigDialog, configs, setConfigs } =\n    React.useContext(TableConfigContext);\n\n  const [value, setValue] = React.useState(\"\");\n\n  const onOpen = React.useCallback(() => {\n    setValue(JSON.stringify(configs, null, 4));\n    setOpenRawConfigDialog(true);\n  }, [configs]);\n\n  const onClose = React.useCallback(() => {\n    setConfigs(JSON.parse(value));\n    setOpenRawConfigDialog(false);\n  }, [value]);\n\n  const handleJSONEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        enableSchemaRequest: true,\n        schemas: [\n          {\n            uri: \"https://raw.githubusercontent.com/sirily11/SECYAN-GEN/master/examples/table_config.json\",\n            fileMatch: [\"*\"],\n            schema: tableStructureSchema,\n          },\n        ],\n      });\n    },\n    [value]\n  );\n\n  return (\n    <PageHeader\n      title=\"Table Configuration\"\n      subTitle=\"Config your table's info here\"\n      extra={[\n        <Button type=\"primary\" onClick={onOpen}>\n          Set Raw Data\n        </Button>,\n      ]}\n    >\n      <Typography style={{ maxWidth: \"800px\" }}>\n        You can either use the raw Data Config Editor to modify your database\n        table's infomation, or use the GUI below to modify your table. You can\n        check this{\" \"}\n        <Typography.Link\n          target=\"_blank\"\n          href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n        >\n          Link\n        </Typography.Link>{\" \"}\n        for example table configuration. You can also fetch table schema by\n        clicking the fetching button. The data path and size field might be\n        empty and will be updated when you click fetch data in settings page.\n        You can update the field mannuly by using raw data editor, however, we\n        don't recommand editting this field mannully.\n      </Typography>\n      <Modal\n        title=\"Raw Data Configuration\"\n        visible={openRawConfigDialog}\n        onOk={onClose}\n        onCancel={onClose}\n        footer={[<Button onClick={onClose}>Close</Button>]}\n        width={window.innerWidth * 0.8}\n      >\n        <Editor\n          height={500}\n          language=\"json\"\n          options={{ minimap: { enabled: false } }}\n          beforeMount={(e) => handleJSONEditorWillMount(e)}\n          value={value}\n          onChange={(e) => {\n            setValue(e ?? \"\");\n          }}\n        />\n      </Modal>\n    </PageHeader>\n  );\n}\n","export const column_types = [\"int\", \"string\", \"decimal\", \"date\"];\n\nexport const table_owner = [\"CLIENT\", \"SERVER\"];\n","export const test_id_config = {\n  tableCard: {\n    testCardPathId: \"table-config-path\",\n    testCardSizeId: \"table-config-size\",\n  },\n};\n","import {\n  Button,\n  Card,\n  Input,\n  Space,\n  Form,\n  Row,\n  Col,\n  Typography,\n  Divider,\n  Select,\n  Modal,\n  notification,\n  List,\n  Descriptions,\n} from \"antd\";\nimport React from \"react\";\nimport { TableConfig } from \"../../model/table-config\";\nimport {\n  EditOutlined,\n  PlusOutlined,\n  MinusCircleOutlined,\n  DeleteOutlined,\n} from \"@ant-design/icons\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { column_types, table_owner } from \"../../../settings/column_types\";\nimport { test_id_config } from \"../../../tests/data/test_id\";\nimport { v4 } from \"uuid\";\n\ninterface Props {\n  config: TableConfig;\n  index: number;\n}\n\ninterface FormValue {\n  path_size: { size: number; path: string }[];\n  columns: any[];\n  annotations: any[];\n}\n\nexport default function TableConfigCard(props: Props) {\n  const { config, index } = props;\n  const [name, setName] = React.useState(config.table_name);\n  const [owner, setOwner] = React.useState(config.owner);\n  const [open, setOpen] = React.useState(false);\n  const { setConfigs, configs } = React.useContext(TableConfigContext);\n\n  const formValues = React.useCallback(() => {\n    return {\n      ...config,\n      annotations: config.annotations.map((v) => {\n        return { annotation: v };\n      }),\n    };\n  }, [config]);\n\n  // Will be used to rename the table\n  const updateTableConfig = React.useCallback(() => {\n    configs[index].table_name = name;\n    configs[index].owner = owner;\n    setConfigs(configs);\n    setOpen(false);\n  }, [name, owner]);\n\n  // Will be used on each field's update\n  const updateConfig = React.useCallback(\n    (value: FormValue) => {\n      console.log(value.annotations);\n      let annotations = value.annotations\n        .filter((v) => v !== undefined && v.annotation !== undefined)\n        .map((a) => a.annotation);\n\n      configs[index].columns = value.columns;\n      configs[index].annotations = annotations !== undefined ? annotations : [];\n      setConfigs(configs, false);\n    },\n    [config, configs]\n  );\n\n  const deleteTable = React.useCallback(() => {\n    Modal.confirm({\n      title: \"confirm\",\n      content: \"Delete this table\",\n      onOk: () => {\n        configs.splice(index, 1);\n        setConfigs(JSON.parse(JSON.stringify(configs)));\n        notification.success({\n          message: \"Table deleted\",\n          placement: \"bottomRight\",\n        });\n      },\n    });\n  }, [config]);\n\n  return (\n    <Card\n      id={config.table_name}\n      title={`${config.table_name} - ${config.owner ?? \"Client\"}`}\n      key={index}\n      style={{ margin: 10 }}\n      extra={[\n        <Button\n          shape=\"circle\"\n          onClick={deleteTable}\n          style={{ marginRight: 10 }}\n        >\n          <DeleteOutlined />\n        </Button>,\n        <Button shape=\"circle\" onClick={() => setOpen(true)}>\n          <EditOutlined />\n        </Button>,\n      ]}\n    >\n      <Descriptions title=\"Data size and path\" bordered={true}>\n        <Descriptions.Item label=\"Data Path\">\n          <div data-testid={test_id_config.tableCard.testCardPathId}>\n            {config.data_paths}\n          </div>\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Data Size\">\n          <div data-testid={test_id_config.tableCard.testCardSizeId}>\n            {config.data_sizes}\n          </div>\n        </Descriptions.Item>\n      </Descriptions>\n      <Form\n        style={{ marginTop: 20 }}\n        initialValues={formValues()}\n        onValuesChange={(_, v) => {\n          updateConfig(v);\n        }}\n      >\n        {/* columns */}\n        <Typography.Title level={5}>Table Columns</Typography.Title>\n        <Form.List name=\"columns\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={`column-${key}`}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={5} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"column_type\"]}\n                        fieldKey={[fieldKey, \"type\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column type is required\",\n                          },\n                        ]}\n                      >\n                        <Select>\n                          {column_types.map((c, i) => (\n                            <Select.Option value={c}>{c}</Select.Option>\n                          ))}\n                        </Select>\n                      </Form.Item>\n                    </Col>\n                    <Col md={5} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"name\"]}\n                        fieldKey={[fieldKey, \"name\"]}\n                        rules={[\n                          {\n                            required: true,\n                            message: \"Column name is required\",\n                          },\n                        ]}\n                      >\n                        <Input placeholder=\"Column Name\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined onClick={() => remove(name)} />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24} key={`button-${v4()}`}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add Column\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n        {/* end columns */}\n        {/* Annotations */}\n        <Typography.Title level={5}>Annotations</Typography.Title>\n        <Form.List name=\"annotations\">\n          {(fields, { add, remove }) => (\n            <div>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Row gutter={[10, 10]}>\n                  <Col span={22}>\n                    <Form.Item\n                      name={[name, \"annotation\"]}\n                      fieldKey={[fieldKey, \"annotation\"]}\n                      label=\"Annotation\"\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col>\n                    <MinusCircleOutlined onClick={() => remove(name)} />\n                  </Col>\n                </Row>\n              ))}\n              <Form.Item>\n                <Button\n                  type=\"dashed\"\n                  onClick={() => add()}\n                  block\n                  icon={<PlusOutlined />}\n                >\n                  Add Annotation\n                </Button>\n              </Form.Item>\n            </div>\n          )}\n        </Form.List>\n        {/* end Annotations */}\n      </Form>\n      <Modal\n        visible={open}\n        title=\"Table name\"\n        onCancel={() => {\n          setName(config.table_name);\n          setOwner(config.owner);\n          setOpen(false);\n        }}\n        onOk={updateTableConfig}\n      >\n        <Input\n          placeholder=\"Table name\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n        <Select\n          style={{ width: \"100%\", marginTop: 20 }}\n          placeholder=\"Select Owner\"\n          value={owner}\n          onChange={(e) => setOwner(e)}\n        >\n          {table_owner.map((v) => (\n            <Select.Option value={v} key={v}>\n              {v}\n            </Select.Option>\n          ))}\n        </Select>\n      </Modal>\n    </Card>\n  );\n}\n","import { Affix, Button, notification, Row, Typography } from \"antd\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport InputRowTableConfigCard from \"./InputRowTableConfigCard\";\nimport TableConfigCard from \"./TableConfigCard\";\nimport qs from \"query-string\";\n\nexport default function TableConfigPage() {\n  const { configs, setConfigs } = React.useContext(TableConfigContext);\n  const [open, setOpen] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const location = useLocation();\n\n  let q = qs.parse(location.search);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 50);\n  }, []);\n\n  React.useEffect(() => {\n    const table = q.table;\n    if (table) {\n      let element = document.getElementById(table as string);\n      element?.scrollIntoView();\n    }\n  }, [location.search, loading]);\n\n  \n  return (\n    <div style={{ overflowY: \"scroll\", height: \"100%\" }}>\n      <InputRowTableConfigCard />\n      {!loading &&\n        configs.map((c, i) => (\n          <TableConfigCard key={`config-${i}`} config={c} index={i} />\n        ))}\n    </div>\n  );\n}\n","import { notification } from \"antd\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport { CodeRunResult } from \"./code-run-result\";\nimport { TableConfig } from \"./table-config\";\nimport { Utils } from \"./utils/utils\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { apiRoutes } from \"../../settings/api_routes\";\nimport { localStorageKeyConfig } from \"../../settings/localstorage_keyconfig\";\n\ninterface Code {\n  codeRunResults: CodeRunResult[];\n  setCodeRunResults(c: CodeRunResult[]): void;\n  runCode(index: number, tableConfigs: TableConfig[]): Promise<void>;\n  isLoading: boolean;\n  index: number;\n  setIndex(num: number): void;\n  showEdit: boolean;\n  setShowEdit(b: boolean): void;\n  deleteResultCache(): void;\n  // initSQLEditor(m: Monaco): void;\n}\n\n//@ts-ignore\nexport const CodeContext = React.createContext<Code>({});\n\nexport default function CodeProvider(props: any) {\n  const { children } = props;\n  const [codeRunResults, setCodeRunResultState] = React.useState<\n    CodeRunResult[]\n  >([]);\n\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [index, setIndex] = React.useState(0);\n  const [showEdit, setShowEdit] = React.useState(false);\n\n  React.useEffect(() => {\n    let code = localStorage.getItem(localStorageKeyConfig.codeResultKey);\n    if (code) {\n      try {\n        setCodeRunResultState(JSON.parse(code));\n      } catch (err) {\n        console.log(\"No Code Saved\");\n      }\n    }\n  }, []);\n\n  const setCodeRunResults = React.useCallback(\n    (c: CodeRunResult[]) => {\n      localStorage.setItem(\n        localStorageKeyConfig.codeResultKey,\n        JSON.stringify(c)\n      );\n      setCodeRunResultState(JSON.parse(JSON.stringify(c)));\n    },\n    [codeRunResults]\n  );\n\n  const runCode = React.useCallback(\n    async (index: number, tableConfigs: TableConfig[]) => {\n      let url = Utils.getURL(apiRoutes.runPythonCodeRoute);\n      let data = codeRunResults[index];\n\n      try {\n        setIsLoading(true);\n        let resp = await axios.post(url, {\n          sql: data.code,\n          annotation_name: data.annotation_name,\n          num_of_rows: data.num_of_rows,\n          table: JSON.stringify(tableConfigs),\n        });\n\n        codeRunResults[index].result = resp.data;\n\n        setCodeRunResults(codeRunResults);\n        notification.info({\n          message: \"Code results returned\",\n          placement: \"bottomRight\",\n        });\n        setIsLoading(false);\n      } catch (err) {\n        setIsLoading(false);\n        notification.error({\n          message: \"Cannot generate code\",\n          description: `${\n            err?.response?.data ?? \"Cannot connect to the backend\"\n          }`,\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n      }\n    },\n    [codeRunResults]\n  );\n\n  const deleteResultCache = React.useCallback(() => {\n    codeRunResults.forEach((c) => {\n      c.result = undefined;\n    });\n\n    setCodeRunResults(codeRunResults);\n  }, [codeRunResults]);\n\n  const value: Code = {\n    codeRunResults,\n    setCodeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setIndex,\n    showEdit,\n    setShowEdit,\n    deleteResultCache,\n  };\n\n  return <CodeContext.Provider value={value}>{children}</CodeContext.Provider>;\n}\n","import { message, notification } from \"antd\";\nimport axios from \"axios\";\nimport { type } from \"node:os\";\nimport React from \"react\";\nimport { apiRoutes } from \"../../settings/api_routes\";\nimport { localStorageKeyConfig } from \"../../settings/localstorage_keyconfig\";\nimport { TableConfig } from \"./table-config\";\nimport { Utils } from \"./utils/utils\";\n\nexport type Role = \"Client\" | \"Server\";\nexport type BackEnd = \"Default Backend\" | \"Postgres Backend\";\n\ninterface Settings {\n  loaded: boolean;\n  role: Role;\n  setRole(role: Role): void;\n  backend: BackEnd;\n  setBackend(b: BackEnd): void;\n  datadir: string;\n  setDatadir(v: string): void;\n  isDownloading: boolean;\n  downloadData(configs: TableConfig[]): Promise<TableConfig[] | undefined>;\n}\n\n//@ts-ignore\nexport const SettingsContext = React.createContext<Settings>({});\n\nexport default function SettingsProvider(props: any) {\n  const [loaded, setLoaded] = React.useState(false);\n  const [role, setRoleState] = React.useState<Role>(\"Server\");\n  const [backend, setBackendState] = React.useState<BackEnd>(\"Default Backend\");\n  const [datadir, setDatadirState] = React.useState(\"\");\n  const [isDownloading, setIsDownloading] = React.useState(false);\n\n  React.useEffect(() => {\n    let role = localStorage.getItem(localStorageKeyConfig.roleKey);\n    let backend = localStorage.getItem(localStorageKeyConfig.backendKey);\n    let data = localStorage.getItem(localStorageKeyConfig.datadirKey);\n\n    if (role) {\n      setRoleState(role as Role);\n    }\n    if (backend) {\n      setBackendState(backend as BackEnd);\n    }\n\n    if (data) {\n      setDatadirState(data);\n    }\n\n    setLoaded(true);\n  }, []);\n\n  const setDatadir = React.useCallback((r: string) => {\n    localStorage.setItem(localStorageKeyConfig.datadirKey, r);\n    setDatadirState(r);\n  }, []);\n\n  const setRole = React.useCallback((r: Role) => {\n    localStorage.setItem(localStorageKeyConfig.roleKey, r);\n    setRoleState(r);\n  }, []);\n\n  const setBackend = React.useCallback((r: BackEnd) => {\n    localStorage.setItem(localStorageKeyConfig.backendKey, r);\n    setBackendState(r);\n  }, []);\n\n  const downloadData = React.useCallback(\n    async (configs: TableConfig[]): Promise<TableConfig[] | undefined> => {\n      setIsDownloading(true);\n      try {\n        let url = Utils.getURL(apiRoutes.downloadDataRoute);\n        let data = await axios.post(url, {\n          tables: JSON.stringify(configs),\n          output_dir: datadir,\n        });\n        message.success(\"Successfully dump data into \" + datadir, 8);\n        return data.data;\n      } catch (err) {\n        notification.error({\n          message: \"Cannot fetch table configs\",\n          description: `${\n            err?.response?.data ?? \"Cannot connect to the backend\"\n          }`,\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n        return undefined;\n      } finally {\n        setIsDownloading(false);\n      }\n    },\n    [datadir]\n  );\n\n  const values: Settings = {\n    role,\n    setRole,\n    backend,\n    setBackend,\n    datadir,\n    setDatadir,\n    loaded,\n    isDownloading,\n    downloadData,\n  };\n\n  return (\n    <SettingsContext.Provider value={values}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n","import * as monaco from \"monaco-editor\";\nimport { TableConfig } from \"../table-config\";\nimport { sqlKeywords } from \"./utils\";\nexport class EditorUtils {\n  static generateSuggestions(range: any, tables?: TableConfig[]) {\n    if (tables) {\n      let suggestions = [];\n      for (let table of tables) {\n        suggestions.push({\n          label: table.table_name,\n          kind: monaco.languages.CompletionItemKind.Constant,\n          documentation: \"\",\n          insertText: table.table_name.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n\n        for (let column of table.columns) {\n          suggestions.push({\n            label: column.name,\n            kind: monaco.languages.CompletionItemKind.Constant,\n            documentation: `${column.column_type}`,\n            insertText: column.name,\n            insertTextRules:\n              monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            range: range,\n          });\n        }\n      }\n\n      for (let k of sqlKeywords) {\n        suggestions.push({\n          label: k.keyword,\n          kind: monaco.languages.CompletionItemKind.Keyword,\n          document: k.desc,\n          insertText: k.keyword.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n      }\n\n      return suggestions;\n    } else {\n      return [];\n    }\n  }\n}\n","import React from \"react\";\nimport { CodeRunResult } from \"../../../model/code-run-result\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Utils } from \"../../../model/utils/utils\";\nimport { TableConfigContext } from \"../../../model/TableContext\";\nimport { Card, Col, notification, Row, Spin, Table } from \"antd\";\n//@ts-ignore\nimport { SettingsContext } from \"../../../model/SettingsContext\";\nimport {\n  DataGrid,\n  GridColDef,\n  GridValueGetterParams,\n} from \"@material-ui/data-grid\";\nimport { EditorUtils } from \"../../../model/utils/editorUtils\";\ninterface Props {\n  codeRunResult: CodeRunResult;\n  index: number;\n}\n\nconst height = \"calc(100vh - 64px - 56px - 20px)\";\nconst tableHeight = \"calc(100vh - 64px - 56px - 30px)\";\nlet hover: monaco.IDisposable | undefined = undefined;\nlet completion: monaco.IDisposable | undefined = undefined;\n\nexport default function CodePanel(props: Props) {\n  const { codeRunResult, index } = props;\n  const { setCodeRunResults, codeRunResults, showEdit, setShowEdit } =\n    React.useContext(CodeContext);\n\n  const [isLoading, setIsLoading] = React.useState(true);\n  const { configs } = React.useContext(TableConfigContext);\n  const { role } = React.useContext(SettingsContext);\n  const [editor, setEditor] =\n    React.useState<monaco.editor.IStandaloneCodeEditor>();\n\n  const handleSQLEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      hover?.dispose();\n      completion?.dispose();\n      completion = monaco.languages.registerCompletionItemProvider(\"sql\", {\n        provideCompletionItems: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordUntilPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          };\n          if (configs) {\n            return {\n              suggestions: EditorUtils.generateSuggestions(range, configs),\n            };\n          }\n        },\n      });\n\n      hover = monaco.languages.registerHoverProvider(\"sql\", {\n        provideHover: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordAtPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word?.startColumn,\n            endColumn: word?.endColumn,\n          };\n          return Utils.generateHover(range, model, word?.word ?? \"\", configs);\n        },\n      });\n    },\n    [configs, editor]\n  );\n\n  React.useEffect(() => {\n    notification.info({\n      message: \"Loading Data\",\n      placement: \"bottomRight\",\n    });\n  }, []);\n\n  // Update editor code\n  const updateCode = React.useCallback(\n    (code: string) => {\n      codeRunResults[index].code = code;\n      setCodeRunResults(codeRunResults);\n    },\n    [codeRunResult]\n  );\n\n  // Table columns\n  const columns = () => {\n    let results: string[][] | undefined =\n      role === \"Server\"\n        ? codeRunResult.result?.server_result\n        : codeRunResult.result?.client_result;\n    if (results?.length ?? 0 > 0) {\n      return results![0].map((v) => {\n        return {\n          title: v.toLocaleUpperCase(),\n          field: v.toLowerCase(),\n          width: v.length * 20,\n        };\n      });\n    }\n    return [];\n  };\n\n  const rows = () => {\n    let res: any[] = [];\n    let results: string[][] | undefined =\n      role === \"Server\"\n        ? codeRunResult.result?.server_result\n        : codeRunResult.result?.client_result;\n    if (results) {\n      let cs = results[0]!;\n      results.slice(1).forEach((s, i) => {\n        let data: { [key: string]: any } = {\n          id: i,\n        };\n        s.forEach((c, j) => {\n          data[cs[j]] = c;\n        });\n        res.push(data);\n      });\n    }\n\n    return res;\n  };\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Row gutter={[10, 10]}>\n        <Col xs={8}>\n          <Editor\n            value={codeRunResult.code}\n            onMount={(e) => {\n              setEditor(e);\n              setIsLoading(false);\n              notification.close(\"Data Loaded\");\n            }}\n            language=\"sql\"\n            beforeMount={(e) => handleSQLEditorWillMount(e)}\n            options={{ minimap: { enabled: false } }}\n            height={height}\n            onChange={(e) => {\n              updateCode(e as string);\n            }}\n          />\n        </Col>\n        <Col\n          xs={16}\n          style={{ overflowY: \"scroll\", overflowX: \"scroll\", height: \"100%\" }}\n        >\n          <div style={{ height: tableHeight, overflowY: \"hidden\" }}>\n            {codeRunResult.result && !isLoading && (\n              <DataGrid columns={columns()} rows={rows()} rowHeight={60} />\n            )}\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Affix, Button, Col, Row, Table, Tabs } from \"antd\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { Utils } from \"../../model/utils/utils\";\nimport CodePanel from \"./components/CodePanel\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\n\nexport default function CodePage() {\n  const { codeRunResults, setCodeRunResults, setIndex } =\n    React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n\n  const renderPanel = React.useCallback(() => {\n    return codeRunResults.map((c, i) => (\n      <Tabs.TabPane tab={c.name} key={i} style={{ height: \"100%\" }}>\n        <CodePanel codeRunResult={c} index={i} />\n      </Tabs.TabPane>\n    ));\n  }, [codeRunResults]);\n\n  return (\n    <Tabs\n      type=\"editable-card\"\n      style={{ height: \"100%\" }}\n      addIcon={<PlusOutlined />}\n      onChange={(index) => {\n        setIndex(parseInt(index));\n      }}\n      onEdit={(targetKey, action) => {\n        if (action === \"add\") {\n          codeRunResults.push({\n            name: \"newResult\",\n            code: \"\",\n            num_of_rows: 100,\n            annotation_name: \"q3_annot\",\n          });\n          setCodeRunResults(codeRunResults);\n        } else {\n          codeRunResults.splice(parseInt(targetKey as string), 1);\n          setCodeRunResults(codeRunResults);\n        }\n      }}\n    >\n      {renderPanel()}\n    </Tabs>\n  );\n}\n","import React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nexport default function TreeDisplay() {\n  const { codeRunResults, index } = React.useContext(CodeContext);\n\n  const result = codeRunResults[index]?.result;\n\n  return (\n    <div style={{ height: 500, width: 1000 }}>\n      {/* {JSON.stringify(result?.joinGraph)} */}\n      {result && (\n        <Tree\n          data={result.joinGraph}\n          orientation=\"vertical\"\n          pathFunc=\"step\"\n          translate={{ y: 100, x: 400 }}\n          nodeSize={{ x: 257, y: 175 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Button, Form, Input, Row, Tooltip, Popover } from \"antd\";\nimport React from \"react\";\nimport {\n  EditOutlined,\n  CaretRightOutlined,\n  BarChartOutlined,\n  UserSwitchOutlined,\n} from \"@ant-design/icons\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport { TableConfigContext } from \"../../../model/TableContext\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport TreeDisplay from \"./TreeDisplay\";\nimport { SettingsContext } from \"../../../model/SettingsContext\";\n\nexport default function CodeAction() {\n  const {\n    setCodeRunResults,\n    codeRunResults,\n    runCode,\n    isLoading,\n    index,\n    setShowEdit,\n    showEdit,\n  } = React.useContext(CodeContext);\n  const { configs } = React.useContext(TableConfigContext);\n  const { role, setRole } = React.useContext(SettingsContext);\n\n  const [form] = Form.useForm();\n\n  // Rename, etc\n  const reConfigure = React.useCallback(() => {\n    let values = form.getFieldsValue();\n    codeRunResults[index].annotation_name = values.annotation_name;\n    codeRunResults[index].name = values.name;\n    codeRunResults[index].num_of_rows = parseInt(values.num_of_rows);\n    setCodeRunResults(codeRunResults);\n    setShowEdit(false);\n  }, [codeRunResults, index]);\n\n  React.useEffect(() => {\n    form.setFieldsValue(codeRunResults[index]);\n  }, [showEdit]);\n\n  return (\n    <Row justify=\"end\" style={{ marginRight: 20 }}>\n      <Tooltip title=\"Run Code\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          loading={isLoading}\n          onClick={async () => {\n            await runCode(index, configs);\n          }}\n        >\n          <CaretRightOutlined />\n        </Button>\n      </Tooltip>\n      <Tooltip title={`\"Current role: ${role}\"`}>\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          onClick={async () => {\n            if (role === \"Client\") {\n              setRole(\"Server\");\n            } else {\n              setRole(\"Client\");\n            }\n          }}\n        >\n          <UserSwitchOutlined />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Rename\">\n        <Button\n          shape=\"round\"\n          size=\"large\"\n          style={{ marginRight: 10 }}\n          onClick={() => {\n            setShowEdit(true);\n          }}\n        >\n          <EditOutlined />\n        </Button>\n      </Tooltip>\n      {codeRunResults[index]?.result && (\n        <Popover\n          content={<TreeDisplay />}\n          placement=\"leftBottom\"\n          trigger=\"click\"\n        >\n          <Tooltip title=\"Join Tree\">\n            <Button\n              shape=\"round\"\n              size=\"large\"\n              style={{ marginRight: 10 }}\n              onClick={() => {}}\n            >\n              <BarChartOutlined />\n            </Button>\n          </Tooltip>\n        </Popover>\n      )}\n      <Modal\n        title=\"Configuration\"\n        visible={showEdit}\n        onOk={reConfigure}\n        onCancel={() => {\n          form.resetFields();\n          setShowEdit(false);\n        }}\n      >\n        <Form initialValues={codeRunResults[index]} form={form}>\n          <Form.Item name=\"name\" label=\"Name\">\n            <Input placeholder=\"Name\" />\n          </Form.Item>\n          <Form.Item name=\"num_of_rows\" label=\"Number of rows\">\n            <Input placeholder=\"Num of rows\" type=\"number\" />\n          </Form.Item>\n          <Form.Item name=\"annotation_name\" label=\"Annotation Name\">\n            <Input placeholder=\"Annotation Name\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </Row>\n  );\n}\n","import {\n  Card,\n  Typography,\n  Form,\n  Select,\n  Button,\n  message,\n  Input,\n  List,\n  Spin,\n} from \"antd\";\nimport React from \"react\";\nimport { BackEnd, Role, SettingsContext } from \"../../model/SettingsContext\";\nimport { useLocation } from \"react-router\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport { TableConfigContext } from \"../../model/TableContext\";\n\ninterface FormValue {\n  role: Role;\n  backend: BackEnd;\n  datadir: string;\n}\n\nexport default function SettingsPage() {\n  const {\n    role,\n    setRole,\n    backend,\n    setBackend,\n    datadir,\n    setDatadir,\n    loaded,\n    downloadData,\n    isDownloading,\n  } = React.useContext(SettingsContext);\n\n  const { configs, setConfigs } = React.useContext(TableConfigContext);\n\n  const { deleteResultCache } = React.useContext(CodeContext);\n\n  const formValue: FormValue = {\n    role: role,\n    backend: backend,\n    datadir: datadir,\n  };\n\n  const settings = (\n    <div>\n      <Card>\n        <Typography.Title level={5}>General Settings</Typography.Title>\n        <Form\n          initialValues={formValue}\n          onValuesChange={(changed) => {\n            if (changed.role) {\n              setRole(changed.role);\n            }\n            if (changed.backend) {\n              setBackend(changed.backend);\n            }\n\n            if (changed.datadir) {\n              setDatadir(changed.datadir);\n            }\n          }}\n        >\n          <Form.Item\n            label=\"Default data dir\"\n            name=\"datadir\"\n            help=\"Your table's data will be stored in this folder\"\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Role\" name=\"role\">\n            <Select>\n              {[\"Client\", \"Server\"].map((v, i) => (\n                <Select.Option value={v} key={`role-${i}`}>\n                  {v}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Backend\"\n            name=\"backend\"\n            extra=\"This will only affect the c++ code generator\"\n          >\n            <Select>\n              {[\"Default Backend\", \"Postgres Backend\"].map((v, i) => (\n                <Select.Option value={v} key={`role-${i}`}>\n                  {v}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n        </Form>\n      </Card>\n      <Card title=\"Data\" style={{ marginTop: 10 }}>\n        <List>\n          <List.Item>\n            <List.Item.Meta\n              title=\"Stored results\"\n              description=\"Your query results\"\n            />\n            <Button\n              onClick={() => {\n                deleteResultCache();\n                message.success(\"Delete cache successfully\");\n              }}\n            >\n              Delete\n            </Button>\n          </List.Item>\n          <List.Item>\n            <List.Item.Meta\n              title=\"Download Data\"\n              description=\"Download table data from database\"\n            />\n            <Button\n              loading={isDownloading}\n              onClick={async () => {\n                let newConfig = await downloadData(configs);\n                if (newConfig) {\n                  setConfigs(newConfig);\n                }\n              }}\n            >\n              Download data\n            </Button>\n          </List.Item>\n        </List>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Typography.Title level={3}>Settings</Typography.Title>\n      {loaded ? settings : <Spin />}\n    </div>\n  );\n}\n","import { Button, Modal, notification, Tooltip, Typography } from \"antd\";\nimport React from \"react\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { PlusOutlined, ReloadOutlined } from \"@ant-design/icons\";\n\nexport default function TableAction() {\n  const [open, setOpen] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const { configs, setConfigs, fetchConfigs } =\n    React.useContext(TableConfigContext);\n\n  const addTable = React.useCallback(() => {\n    configs.push({\n      table_name: \"table\",\n      data_sizes: [],\n      data_paths: [],\n      columns: [],\n      owner: \"Server\",\n      annotations: [],\n    });\n    setConfigs(configs);\n    setOpen(false);\n    notification.success({\n      message: \"Added a new table\",\n      placement: \"bottomRight\",\n    });\n  }, [configs]);\n\n  return (\n    <div>\n      <Tooltip title=\"Fetch Table Config from DB\">\n        <Button\n          shape=\"round\"\n          loading={isLoading}\n          style={{ marginRight: 20 }}\n          onClick={async () => {\n            setIsLoading(true);\n            await fetchConfigs();\n            setIsLoading(false);\n          }}\n        >\n          <ReloadOutlined />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Create a new table\">\n        <Button\n          shape=\"round\"\n          style={{ marginRight: 20 }}\n          onClick={() => setOpen(true)}\n        >\n          <PlusOutlined />\n        </Button>\n      </Tooltip>\n      <Modal\n        visible={open}\n        title=\"Add New Table\"\n        onOk={addTable}\n        onCancel={() => {\n          setOpen(false);\n        }}\n      >\n        <Typography>Create a empty table?</Typography>\n      </Modal>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  TableOutlined,\n  SettingOutlined,\n  CodeOutlined,\n} from \"@ant-design/icons\";\nimport TableConfigPage from \"../components/pages/table/TableConfigPage\";\nimport CodePage from \"../components/pages/code/CodePage\";\nimport CodeAction from \"../components/pages/code/components/CodeAction\";\nimport SettingsPage from \"../components/pages/settings/SettingsPage\";\nimport TableAction from \"../components/pages/table/TableAction\";\n\ninterface Route {\n  path: string;\n  component: JSX.Element;\n  title: string;\n  icon: JSX.Element;\n  hasSubMenu: boolean;\n  action?: JSX.Element;\n}\n\nexport const routes: Route[] = [\n  {\n    path: \"/\",\n    title: \"Table Config\",\n    component: <TableConfigPage />,\n    icon: <TableOutlined />,\n    action: <TableAction />,\n    hasSubMenu: true,\n  },\n  {\n    path: \"/settings\",\n    title: \"Settings\",\n    component: <SettingsPage />,\n    icon: <SettingOutlined />,\n    hasSubMenu: false,\n  },\n  {\n    path: \"/editor\",\n    title: \"Query Editor\",\n    component: <CodePage />,\n    icon: <CodeOutlined />,\n    hasSubMenu: false,\n    action: <CodeAction />,\n  },\n];\n","import React from \"react\";\nimport { matchPath } from \"react-router\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { Menu } from \"antd\";\nimport { routes } from \"../../settings/routes\";\nimport { TableConfigContext } from \"../model/TableContext\";\nimport SubMenu from \"antd/lib/menu/SubMenu\";\nimport qs from \"query-string\";\n\nexport default function SideBar(props: { expanded: boolean }) {\n  const { configs } = React.useContext(TableConfigContext);\n  const location = useLocation();\n  const history = useHistory();\n  const [selectedPath, setSelectedPath] = React.useState(routes[0].title);\n  const { expanded } = props;\n  const table = qs.parse(location.search).table;\n\n  React.useEffect(() => {\n    if (location.pathname !== routes[0].path) {\n      let route = routes.find(\n        (r) => location.pathname.includes(r.path) && r.path !== routes[0].path\n      );\n      if (route) {\n        setSelectedPath(route?.title);\n      }\n    } else {\n      setSelectedPath(routes[0].title);\n    }\n  }, [location]);\n\n  const renderSubMenu = React.useCallback(\n    (path: string) => {\n      if (path === routes[0].path) {\n        return configs.map((c, i) => (\n          <Menu.Item\n            key={c.table_name}\n            onClick={() => {\n              history.push(`${routes[0].path}?table=${c.table_name}`);\n            }}\n          >\n            {c.table_name}\n          </Menu.Item>\n        ));\n      } else {\n        return [];\n      }\n    },\n    [configs]\n  );\n\n  const renderMenu = React.useCallback(() => {\n    return routes.map((r) => {\n      let subMenus = renderSubMenu(r.path);\n\n      if (!r.hasSubMenu) {\n        return (\n          <Menu.Item\n            key={r.title}\n            icon={r.icon}\n            onClick={() => history.push(r.path)}\n          >\n            {r.title}\n          </Menu.Item>\n        );\n      } else {\n        return (\n          <SubMenu\n            key={r.title}\n            title={r.title}\n            onTitleClick={() => history.push(r.path)}\n            icon={r.icon}\n          >\n            {subMenus}\n          </SubMenu>\n        );\n      }\n    });\n  }, [configs]);\n\n  return (\n    <Menu\n      theme=\"light\"\n      mode=\"inline\"\n      selectedKeys={table === undefined ? [selectedPath] : [table as string]}\n      style={{ height: \"100%\" }}\n    >\n      {renderMenu()}\n    </Menu>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Button, Card, Layout, Menu, Row } from \"antd\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport SideBar from \"./components/sider/SideBar\";\nimport { routes } from \"./settings/routes\";\nimport TableConfigProvider from \"./components/model/TableContext\";\nimport CodeProvider from \"./components/model/CodeContext\";\nimport SettingsProvider from \"./components/model/SettingsContext\";\n\nconst { Header, Sider, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  return (\n    <div style={{ overflow: \"hidden\" }}>\n      <SettingsProvider>\n        <CodeProvider>\n          <TableConfigProvider>\n            <Router>\n              <Layout style={{ height: \"100vh\", overflow: \"hidden\" }}>\n                <Card\n                  style={{ margin: 0, padding: 0 }}\n                  bodyStyle={{ padding: 0 }}\n                >\n                  <Row align=\"middle\">\n                    <div\n                      className=\"trigger\"\n                      onClick={() => setCollapsed(!collapsed)}\n                    >\n                      {collapsed ? (\n                        <MenuUnfoldOutlined />\n                      ) : (\n                        <MenuFoldOutlined />\n                      )}\n                    </div>\n                    <h1 style={{ padding: 10 }}>CodeGen</h1>\n                    <div style={{ flexGrow: 1 }}> </div>\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-action-${i}`} path={r.path} exact>\n                          {r.action}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Row>\n                </Card>\n\n                <Layout style={{ background: \"white\" }}>\n                  <Sider\n                    collapsible\n                    style={{ background: \"#fff\" }}\n                    trigger={null}\n                    collapsed={collapsed}\n                  >\n                    <SideBar expanded={!collapsed} />\n                  </Sider>\n                  <Content\n                    style={{\n                      margin: \"0px 0px\",\n                      padding: 0,\n                      minHeight: 280,\n                    }}\n                  >\n                    <Switch>\n                      {routes.map((r, i) => (\n                        <Route key={`route-${i}`} path={r.path} exact>\n                          {r.component}\n                        </Route>\n                      ))}\n                    </Switch>\n                  </Content>\n                </Layout>\n              </Layout>\n            </Router>\n          </TableConfigProvider>\n        </CodeProvider>\n      </SettingsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}