{"version":3,"sources":["components/model/utils.tsx","components/model/CodeContext.tsx","components/pages/home/component/TreeDisplay.tsx","components/pages/home/component/ErrorTablesDisplay.tsx","components/pages/home/component/CodeDisplay.tsx","components/pages/home/component/Header.tsx","components/pages/home/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sqlKeywords","keyword","desc","Utils","p","URL","process","href","range","model","text","table","contents","tables","JSON","parse","k","toLowerCase","includes","value","table_name","columns","column","toLocaleLowerCase","name","column_type","suggestions","push","label","kind","monaco","CompletionItemKind","Constant","documentation","insertText","toUpperCase","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","Keyword","document","CodeProvider","props","setFunctionName","setState","functionName","setDatabase","databaseName","setBackend","end","backend","localStorage","setItem","post","a","result","undefined","url","getURL","Axios","sql","state","code","tableStructure","resp","data","postDB","getItem","createDB","database","setCode","window","setTable","dbName","this","CodeContext","Provider","children","Component","context","React","createContext","TreeDisplay","useContext","style","height","width","joinGraph","orientation","pathFunc","translate","y","x","nodeSize","ErrorTablesDisplay","level","errorTables","map","e","Title","Typography","Paragraph","Text","Link","CodeDisplay","useState","copied","setCopied","useEffect","overflow","position","top","right","gutter","onClick","navigator","clipboard","writeText","content","placement","trigger","isFreeConnex","type","marginBottom","message","defaultProps","language","theme","className","tokens","getLineProps","getTokenProps","line","i","key","token","Option","Select","Header","show","setShow","setCreateDB","setDBName","Form","useForm","select","onChange","v","extra","title","visible","onCancel","onOk","options","minimap","enabled","target","checked","placeholder","TabPane","Tabs","HomePage","innerHeight","setHeight","isLoading","setIsLoading","addEventListener","handleEditorWillMount","useCallback","languages","registerCompletionItemProvider","provideCompletionItems","word","getWordUntilPosition","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","generateSuggestions","registerHoverProvider","provideHover","getWordAtPosition","generateHover","padding","span","defaultActiveKey","tab","beforeMount","justifyContent","marginTop","loading","length","alert","notification","info","error","description","response","duration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.48185655.chunk.js","sourcesContent":["import * as monaco from \"monaco-editor\";\nexport interface TableInterface {\n  table_name: string;\n  columns: ColumnInterface[];\n}\n\nexport interface ColumnInterface {\n  column_type: string;\n  name: string;\n}\n\nexport const sqlKeywords = [\n  {\n    keyword: \"select\",\n    desc: \"\",\n  },\n  {\n    keyword: \"from\",\n    desc: \"\",\n  },\n  {\n    keyword: \"where\",\n    desc: \"\",\n  },\n  {\n    keyword: \"sum\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"max\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"avg\",\n    desc: \"Aggregation function\",\n  },\n  {\n    keyword: \"count\",\n    desc: \"Aggregation function\",\n  },\n\n  {\n    keyword: \"group by\",\n    desc: \"\",\n  },\n  {\n    keyword: \"desc\",\n    desc: \"\",\n  },\n  {\n    keyword: \"limit\",\n    desc: \"\",\n  },\n  {\n    keyword: \"having\",\n    desc: \"\",\n  },\n  {\n    keyword: \"exists\",\n    desc: \"\",\n  },\n];\n\nexport class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n\n  static generateHover(range: any, model: any, text: string, table?: string) {\n    if (table) {\n      let tables: TableInterface[] = JSON.parse(table);\n      for (let k of sqlKeywords) {\n        if (text.toLowerCase().includes(k.keyword.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"SQL Built In\" }, { value: k.desc }],\n          };\n        }\n      }\n      for (let table of tables) {\n        if (text.toLowerCase().includes(table.table_name.toLowerCase())) {\n          return {\n            range,\n            contents: [{ value: \"Table Name\" }],\n          };\n        }\n\n        for (let column of table.columns) {\n          if (text.toLocaleLowerCase().includes(column.name.toLowerCase())) {\n            return {\n              range,\n              contents: [\n                { value: table.table_name },\n                { value: `**Type: ${column.column_type}**` },\n              ],\n            };\n          }\n        }\n      }\n    } else\n      return {\n        range,\n        contents: [],\n      };\n  }\n\n  static generateSuggestions(range: any, table?: string) {\n    if (table) {\n      let tables: TableInterface[] = JSON.parse(table);\n      let suggestions = [];\n      for (let table of tables) {\n        suggestions.push({\n          label: table.table_name,\n          kind: monaco.languages.CompletionItemKind.Constant,\n          documentation: \"\",\n          insertText: table.table_name.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n\n        for (let column of table.columns) {\n          suggestions.push({\n            label: column.name,\n            kind: monaco.languages.CompletionItemKind.Constant,\n            documentation: `${column.column_type}`,\n            insertText: column.name,\n            insertTextRules:\n              monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            range: range,\n          });\n        }\n      }\n\n      for (let k of sqlKeywords) {\n        suggestions.push({\n          label: k.keyword,\n          kind: monaco.languages.CompletionItemKind.Keyword,\n          document: k.desc,\n          insertText: k.keyword.toUpperCase(),\n          insertTextRules:\n            monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          range: range,\n        });\n      }\n\n      return suggestions;\n    } else {\n      return [];\n    }\n  }\n}\n","/** @format */\n\nimport React, { Component } from \"react\";\nimport { Utils } from \"./utils\";\nimport Axios from \"axios\";\n\ninterface Result {\n  code: string;\n  joinGraph: any;\n  isFreeConnex: boolean;\n  errorTables: string[];\n}\n\ninterface CodeContextState {\n  code?: string;\n  tableStructure?: string;\n  result?: Result;\n  backend: string;\n  databaseName?: string;\n  functionName?: string;\n  setFunctionName(name: string): void;\n  setBackend(backend: string): void;\n  post(): Promise<void>;\n  postDB(): Promise<void>;\n  setCode(code: string): void;\n  setDatabase(name?: string): void;\n  setTable(table: string): void;\n}\n\ninterface CodeProps {}\n\nexport class CodeProvider extends Component<CodeProps, CodeContextState> {\n  constructor(props: CodeProps) {\n    super(props);\n    let backend = localStorage.getItem(\"backend\") ?? \"python\";\n    let createDB = localStorage.getItem(\"createDB\") === \"true\" ? true : false;\n    let dbName = !createDB\n      ? localStorage.getItem(\"dbName\") ?? undefined\n      : undefined;\n\n    this.state = {\n      setCode: this.setCode,\n      setBackend: this.setBackend,\n      backend: backend,\n      setTable: this.setTable,\n      post: this.post,\n      setDatabase: this.setDatabase,\n      postDB: this.postDB,\n      setFunctionName: this.setFunctionName,\n      databaseName: dbName,\n    };\n  }\n\n  componentDidMount() {\n    let code = window.localStorage.getItem(\"code\");\n    let tableStructure = window.localStorage.getItem(\"tableStructure\");\n    this.setState({\n      code: code ?? \"\",\n      tableStructure: tableStructure ?? \"\",\n    });\n  }\n\n  setFunctionName = (name: string) => {\n    this.setState({ functionName: name });\n  };\n\n  setDatabase = (name?: string) => {\n    this.setState({ databaseName: name });\n  };\n\n  setBackend = (end: string) => {\n    this.setState({ backend: end });\n    localStorage.setItem(\"backend\", end);\n  };\n\n  /**\n   * Post request and update generated code\n   */\n  post = async (): Promise<void> => {\n    this.setState({ result: undefined });\n    let url = Utils.getURL(\"generate\");\n    let resp = await Axios.post<Result>(url, {\n      sql: this.state.code,\n      table: this.state.tableStructure,\n      functionName: this.state.functionName,\n    });\n    this.setState({ result: resp.data });\n  };\n\n  /**\n   * Post request using db execution plan\n   */\n  postDB = async (): Promise<void> => {\n    this.setState({ result: undefined });\n    let url = Utils.getURL(\"generate_db\");\n    if (localStorage.getItem(\"createDB\") === \"true\") {\n      await this.createDB();\n    }\n    let resp = await Axios.post<Result>(url, {\n      sql: this.state.code,\n      table: this.state.tableStructure,\n      database: this.state.databaseName,\n      functionName: this.state.functionName,\n    });\n    this.setState({ result: resp.data });\n  };\n\n  createDB = async (): Promise<void> => {\n    let code = localStorage.getItem(\"createScript\");\n    let url = Utils.getURL(\"create_db\");\n    await Axios.post(url, { data: code });\n  };\n\n  setCode = (code: string) => {\n    this.setState({ code });\n    window.localStorage.setItem(\"code\", code);\n  };\n\n  setTable = (tableStructure: string) => {\n    this.setState({ tableStructure });\n    window.localStorage.setItem(\"tableStructure\", tableStructure);\n  };\n\n  render() {\n    return (\n      <CodeContext.Provider value={this.state}>\n        {this.props.children}\n      </CodeContext.Provider>\n    );\n  }\n}\n\n//@ts-ignore\nconst context: CodeContextState = {};\n\nexport const CodeContext = React.createContext(context);\n","import React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport Tree from \"react-d3-tree\";\n\nexport default function TreeDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <div style={{ height: 500, width: 1000 }}>\n      {/* {JSON.stringify(result?.joinGraph)} */}\n      {result && (\n        <Tree\n          data={result.joinGraph}\n          orientation=\"vertical\"\n          pathFunc=\"step\"\n          translate={{ y: 100, x: 400 }}\n          nodeSize={{ x: 257, y: 175 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Typography } from \"antd\";\nimport Paragraph from \"antd/lib/typography/Paragraph\";\nimport Title from \"antd/lib/typography/Title\";\nimport React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nexport default function ErrorTablesDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <Typography>\n      <Title level={5}>Table with errors</Title>\n      <ul>\n        {result?.errorTables.map((e) => (\n          <li key={e}>\n            <Paragraph>{e}</Paragraph>\n          </li>\n        ))}\n      </ul>\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { CodeContext } from \"../../../model/CodeContext\";\nimport {\n  Affix,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Popover,\n  Row,\n  Typography,\n} from \"antd\";\nimport theme from \"prism-react-renderer/themes/github\";\nimport TreeDisplay from \"./TreeDisplay\";\nimport ErrorTablesDisplay from \"./ErrorTablesDisplay\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nexport default function CodeDisplay() {\n  const { result } = React.useContext(CodeContext);\n  const [copied, setCopied] = React.useState(false);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    setCopied(false);\n  }, [result]);\n\n  return (\n    <Card style={{ width: \"100%\", height: \"90vh\", overflow: \"scroll\" }}>\n      <Affix style={{ position: \"fixed\", top: 110, right: 40 }}>\n        <Row gutter={[10, 10]}>\n          <Col>\n            <Button\n              onClick={() => {\n                navigator.clipboard.writeText(result?.code ?? \"\");\n                setCopied(true);\n              }}\n            >\n              {copied ? \"Copied\" : \"Copy\"}\n            </Button>\n          </Col>\n          <Col>\n            <Popover\n              content={<TreeDisplay />}\n              placement=\"leftBottom\"\n              trigger=\"click\"\n            >\n              <Button>Show Join Tree</Button>\n            </Popover>\n          </Col>\n        </Row>\n      </Affix>\n      <Typography>\n        <Title>Result</Title>\n      </Typography>\n      {result?.isFreeConnex === false && (\n        <Popover content={<ErrorTablesDisplay />}>\n          <Alert\n            type=\"error\"\n            style={{ marginBottom: 10 }}\n            message={`Cannot auto generate a free connex join tree from query. Check the join tree and reorder your join statement.`}\n          />\n        </Popover>\n      )}\n      <Highlight\n        {...defaultProps}\n        code={result!.code}\n        language=\"cpp\"\n        theme={theme}\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </Card>\n  );\n}\n","import Editor from \"@monaco-editor/react\";\nimport { Button, PageHeader, Select, Form, Input } from \"antd\";\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport React from \"react\";\nimport { CodeContext } from \"../../../model/CodeContext\";\n\nconst { Option } = Select;\n\nexport default function Header() {\n  const [show, setShow] = React.useState(false);\n  const [code, setCode] = React.useState(\"\");\n  const [createDB, setCreateDB] = React.useState(false);\n  const [dbName, setDBName] = React.useState(\"\");\n  const [form] = Form.useForm();\n  const { setBackend, backend, setDatabase } = React.useContext(CodeContext);\n\n  const onSettingsClick = () => {\n    setCode(localStorage.getItem(\"createScript\") ?? \"\");\n    setCreateDB(localStorage.getItem(\"createDB\") === \"true\" ? true : false);\n    setDBName(localStorage.getItem(\"dbName\") ?? \"\");\n    setShow(true);\n  };\n\n  const onSubmit = () => {\n    localStorage.setItem(\"createScript\", code);\n    localStorage.setItem(\"createDB\", createDB === true ? \"true\" : \"false\");\n    localStorage.setItem(\"dbName\", dbName);\n    if (!createDB) {\n      setDatabase(dbName);\n    } else {\n      setDatabase(undefined);\n    }\n    setShow(false);\n  };\n\n  const select = (\n    <Select\n      value={backend}\n      style={{ width: 200 }}\n      onChange={(v) => setBackend(v)}\n    >\n      <Option value={\"python\"}>Use Default Backend</Option>\n      <Option value={\"db\"}>Use Query Plan</Option>\n    </Select>\n  );\n  const extra =\n    backend == \"python\"\n      ? [select]\n      : [\n          select,\n          <Button type=\"primary\" onClick={onSettingsClick}>\n            Settings\n          </Button>,\n        ];\n\n  return (\n    <div>\n      <PageHeader title=\"CodeGen\" extra={extra} />\n\n      <Modal\n        visible={show}\n        title=\"Database settings\"\n        onCancel={() => setShow(false)}\n        onOk={() => {\n          onSubmit();\n        }}\n      >\n        {createDB && (\n          <div style={{ height: 500 }}>\n            <Editor\n              value={code}\n              options={{ minimap: { enabled: false } }}\n              onChange={(v) => setCode(v ?? \"\")}\n              language=\"sql\"\n            />\n          </div>\n        )}\n        <Checkbox\n          value={createDB}\n          onChange={(v) => {\n            setCreateDB(v.target.checked);\n          }}\n        >\n          Create database\n        </Checkbox>\n        {createDB}\n        {!createDB && (\n          <Input\n            placeholder=\"Database Name\"\n            value={dbName}\n            onChange={(e) => setDBName(e.target.value)}\n          />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","import {\n  Button,\n  Card,\n  Col,\n  Input,\n  notification,\n  PageHeader,\n  Row,\n  Select,\n  Tabs,\n  Typography,\n} from \"antd\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport Editor from \"@monaco-editor/react\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport React from \"react\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport CodeDisplay from \"./component/CodeDisplay\";\nimport Header from \"./component/Header\";\nimport * as monaco from \"monaco-editor\";\nimport { Utils } from \"../../model/utils\";\n\nconst { TabPane } = Tabs;\n\nconst { Link } = Typography;\n\nexport default function HomePage() {\n  const [height, setHeight] = React.useState(window.innerHeight);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setHeight(window.innerHeight);\n    });\n  }, []);\n\n  const {\n    setCode,\n    setTable,\n    code,\n    tableStructure,\n    result,\n    post,\n    postDB,\n    backend,\n    functionName,\n    setFunctionName,\n  } = React.useContext(CodeContext);\n\n  const handleEditorWillMount = React.useCallback(\n    (monaco: any) => {\n      monaco.languages.registerCompletionItemProvider(\"sql\", {\n        provideCompletionItems: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordUntilPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word.startColumn,\n            endColumn: word.endColumn,\n          };\n          if (tableStructure)\n            return {\n              suggestions: Utils.generateSuggestions(range, tableStructure),\n            };\n        },\n      });\n\n      monaco.languages.registerHoverProvider(\"sql\", {\n        provideHover: (\n          model: monaco.editor.ITextModel,\n          position: monaco.Position\n        ) => {\n          var word = model.getWordAtPosition(position);\n          var range = {\n            startLineNumber: position.lineNumber,\n            endLineNumber: position.lineNumber,\n            startColumn: word?.startColumn,\n            endColumn: word?.endColumn,\n          };\n          return Utils.generateHover(\n            range,\n            model,\n            word?.word ?? \"\",\n            tableStructure\n          );\n        },\n      });\n    },\n    [tableStructure]\n  );\n\n  return (\n    <Layout style={{ height: \"100vh\", overflow: \"hidden\", padding: 10 }}>\n      <Header />\n      <Content style={{ height: \"100%\" }}>\n        <Row style={{ height: \"80%\" }} gutter={[16, 10]}>\n          <Col span={8}>\n            <Card>\n              <Tabs defaultActiveKey=\"0\" onChange={() => {}}>\n                <TabPane tab=\"Function Info\" key=\"0\">\n                  <Input\n                    value={functionName}\n                    placeholder=\"Function Name\"\n                    onChange={(e) => {\n                      setFunctionName(e.target.value);\n                    }}\n                  />\n                </TabPane>\n                <TabPane tab=\"SQL Statement\" key=\"1\">\n                  <Editor\n                    height={height - 300}\n                    beforeMount={(e) => {\n                      handleEditorWillMount(e);\n                    }}\n                    language=\"sql\"\n                    value={code}\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setCode(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n                <TabPane tab=\"Table structure\" key=\"2\">\n                  <Typography>\n                    <Link\n                      target=\"_blank\"\n                      href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n                    >\n                      Example Table Structure\n                    </Link>\n                  </Typography>\n                  <Editor\n                    height={height - 300}\n                    value={tableStructure}\n                    language=\"json\"\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setTable(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n              </Tabs>\n              <Row style={{ justifyContent: \"flex-end\", marginTop: 10 }}>\n                <Button\n                  type=\"primary\"\n                  loading={isLoading}\n                  onClick={async () => {\n                    setIsLoading(true);\n                    if (code?.length === 0 || tableStructure?.length === 0) {\n                      window.alert(\"Invaild Input\");\n                      setIsLoading(false);\n                      return;\n                    }\n                    try {\n                      if (backend == \"python\") {\n                        await post();\n                      } else {\n                        await postDB();\n                      }\n                      notification.info({\n                        message: \"Code generated\",\n                      });\n                    } catch (err) {\n                      notification.error({\n                        message: \"Cannot generate code\",\n                        description: `${err?.response?.data}`,\n                        duration: 5,\n                      });\n                    } finally {\n                      setIsLoading(false);\n                    }\n                  }}\n                >\n                  Convert\n                </Button>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={16}>{result && <CodeDisplay />}</Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport { CodeProvider } from './components/model/CodeContext';\nimport HomePage from './components/pages/home/HomePage';\n\nfunction App() {\n  return (\n    <CodeProvider>\n      <HomePage />\n    </CodeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}