{"version":3,"sources":["components/model/utils.tsx","components/model/CodeContext.tsx","components/pages/home/TreeDisplay.tsx","components/pages/home/ErrorTablesDisplay.tsx","components/pages/home/CodeDisplay.tsx","components/pages/home/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Utils","p","URL","process","href","CodeProvider","props","post","a","setState","result","undefined","url","getURL","console","log","Axios","sql","state","code","table","tableStructure","resp","data","setCode","window","localStorage","setItem","setTable","getItem","this","CodeContext","Provider","value","children","Component","context","React","createContext","TreeDisplay","useContext","style","height","width","joinGraph","orientation","pathFunc","translate","y","x","ErrorTablesDisplay","level","errorTables","map","e","Title","Typography","Paragraph","Text","Link","CodeDisplay","useState","copied","setCopied","useEffect","overflow","position","top","right","gutter","onClick","navigator","clipboard","writeText","content","placement","isFreeConnex","type","marginBottom","message","defaultProps","language","theme","className","tokens","getLineProps","getTokenProps","line","i","key","token","TabPane","Tabs","HomePage","innerHeight","setHeight","isLoading","setIsLoading","addEventListener","maxHeight","padding","title","span","defaultActiveKey","onChange","tab","options","minimap","enabled","target","justifyContent","marginTop","loading","length","alert","notification","info","open","description","response","duration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.639f037b.chunk.js","sourcesContent":["export class Utils {\n  static getURL(p: string): string {\n    return new URL(p, process.env.REACT_APP_URL).href;\n  }\n}\n","/** @format */\n\nimport React, { Component } from \"react\";\nimport { Utils } from \"./utils\";\nimport Axios from \"axios\";\n\ninterface Result {\n  code: string;\n  joinGraph: any;\n  isFreeConnex: boolean;\n  errorTables: string[];\n}\n\ninterface CodeContextState {\n  code?: string;\n  tableStructure?: string;\n  result?: Result;\n  post(): Promise<void>;\n  setCode(code: string): void;\n  setTable(table: string): void;\n}\n\ninterface CodeProps {}\n\nexport class CodeProvider extends Component<CodeProps, CodeContextState> {\n  constructor(props: CodeProps) {\n    super(props);\n    this.state = {\n      setCode: this.setCode,\n      setTable: this.setTable,\n      post: this.post,\n    };\n  }\n\n  componentDidMount() {\n    let code = window.localStorage.getItem(\"code\");\n    let tableStructure = window.localStorage.getItem(\"tableStructure\");\n    this.setState({\n      code: code ?? \"\",\n      tableStructure: tableStructure ?? \"\",\n    });\n  }\n\n  post = async (): Promise<void> => {\n    this.setState({ result: undefined });\n    let url = Utils.getURL(\"generate\");\n    console.log(\"url\", url);\n    let resp = await Axios.post<Result>(url, {\n      sql: this.state.code,\n      table: this.state.tableStructure,\n    });\n    console.log(resp.data);\n    this.setState({ result: resp.data });\n  };\n\n  setCode = (code: string) => {\n    this.setState({ code });\n    window.localStorage.setItem(\"code\", code);\n  };\n\n  setTable = (tableStructure: string) => {\n    this.setState({ tableStructure });\n    window.localStorage.setItem(\"tableStructure\", tableStructure);\n  };\n\n  render() {\n    return (\n      <CodeContext.Provider value={this.state}>\n        {this.props.children}\n      </CodeContext.Provider>\n    );\n  }\n}\n\n//@ts-ignore\nconst context: CodeContextState = {};\n\nexport const CodeContext = React.createContext(context);\n","import React from \"react\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport Tree from \"react-d3-tree\";\n\nexport default function TreeDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <div style={{ height: 500, width: 500 }}>\n      {/* {JSON.stringify(result?.joinGraph)} */}\n      {result && (\n        <Tree\n          data={result.joinGraph}\n          orientation=\"vertical\"\n          pathFunc=\"step\"\n          translate={{ y: 100, x: 200 }}\n        />\n      )}\n    </div>\n  );\n}\n","import { Typography } from \"antd\";\nimport Paragraph from \"antd/lib/typography/Paragraph\";\nimport Title from \"antd/lib/typography/Title\";\nimport React from \"react\";\nimport { CodeContext } from \"../../model/CodeContext\";\n\nexport default function ErrorTablesDisplay() {\n  const { result } = React.useContext(CodeContext);\n\n  return (\n    <Typography>\n      <Title level={5}>Table with errors</Title>\n      <ul>\n        {result?.errorTables.map((e) => (\n          <li key={e}>\n            <Paragraph>{e}</Paragraph>\n          </li>\n        ))}\n      </ul>\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport {\n  Affix,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Popover,\n  Row,\n  Typography,\n} from \"antd\";\nimport theme from \"prism-react-renderer/themes/github\";\nimport TreeDisplay from \"./TreeDisplay\";\nimport ErrorTablesDisplay from \"./ErrorTablesDisplay\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nexport default function CodeDisplay() {\n  const { result } = React.useContext(CodeContext);\n  const [copied, setCopied] = React.useState(false);\n  React.useEffect(() => {\n    setCopied(false);\n  }, [result]);\n\n  return (\n    <Card style={{ width: \"100%\", height: \"90vh\", overflow: \"scroll\" }}>\n      <Affix style={{ position: \"fixed\", top: 110, right: 40 }}>\n        <Row gutter={[10, 10]}>\n          <Col>\n            <Button\n              onClick={() => {\n                navigator.clipboard.writeText(result?.code ?? \"\");\n                setCopied(true);\n              }}\n            >\n              {copied ? \"Copied\" : \"Copy\"}\n            </Button>\n          </Col>\n          <Col>\n            <Popover content={<TreeDisplay />} placement=\"leftBottom\">\n              <Button>Show Join Tree</Button>\n            </Popover>\n          </Col>\n        </Row>\n      </Affix>\n      <Typography>\n        <Title>Result</Title>\n      </Typography>\n      {result?.isFreeConnex === false && (\n        <Popover content={<ErrorTablesDisplay />}>\n          <Alert\n            type=\"error\"\n            style={{ marginBottom: 10 }}\n            message={`This query is not a free connex query. Check the join tree and reorder your join statement.`}\n          />\n        </Popover>\n      )}\n      <Highlight\n        {...defaultProps}\n        code={result!.code}\n        language=\"cpp\"\n        theme={theme}\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </Card>\n  );\n}\n","import {\n  Button,\n  Card,\n  Col,\n  notification,\n  PageHeader,\n  Row,\n  Tabs,\n  Typography,\n} from \"antd\";\nimport Layout, { Content } from \"antd/lib/layout/layout\";\nimport Editor from \"@monaco-editor/react\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport React from \"react\";\nimport { CodeContext } from \"../../model/CodeContext\";\nimport CodeDisplay from \"./CodeDisplay\";\n\nconst { TabPane } = Tabs;\nconst { Link } = Typography;\n\nexport default function HomePage() {\n  const [height, setHeight] = React.useState(window.innerHeight);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setHeight(window.innerHeight);\n    });\n  }, []);\n\n  const {\n    setCode,\n    setTable,\n    code,\n    tableStructure,\n    result,\n    post,\n  } = React.useContext(CodeContext);\n\n  return (\n    <Layout style={{ maxHeight: \"100vh\", overflow: \"hidden\", padding: 10 }}>\n      <PageHeader title=\"CodeGen\" />\n      <Content>\n        <Row style={{ height: \"80%\" }} gutter={[16, 10]}>\n          <Col span={8}>\n            <Card>\n              <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\n                <TabPane tab=\"SQL Statement\" key=\"1\">\n                  <Editor\n                    height={height - 300}\n                    language=\"sql\"\n                    value={code}\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setCode(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n                <TabPane tab=\"Table structure\" key=\"2\">\n                  <Typography>\n                    <Link\n                      target=\"_blank\"\n                      href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n                    >\n                      Example Table Structure\n                    </Link>\n                  </Typography>\n                  <Editor\n                    height={height - 300}\n                    value={tableStructure}\n                    language=\"json\"\n                    options={{ minimap: { enabled: false } }}\n                    onChange={(e) => {\n                      if (e) {\n                        setTable(e);\n                      }\n                    }}\n                  />\n                </TabPane>\n              </Tabs>\n              <Row style={{ justifyContent: \"flex-end\", marginTop: 10 }}>\n                <Button\n                  type=\"primary\"\n                  loading={isLoading}\n                  onClick={async () => {\n                    setIsLoading(true);\n                    if (code?.length === 0 || tableStructure?.length === 0) {\n                      window.alert(\"Invaild Input\");\n                      setIsLoading(false);\n                      return;\n                    }\n                    try {\n                      await post();\n                      notification.info({\n                        message: \"Code generated\",\n                      });\n                    } catch (err) {\n                      notification.open({\n                        message: \"Cannot generate code\",\n                        description: `${err?.response?.data}`,\n                        duration: 5,\n                      });\n                    } finally {\n                      setIsLoading(false);\n                    }\n                  }}\n                >\n                  Convert\n                </Button>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={16}>{result && <CodeDisplay />}</Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport { CodeProvider } from './components/model/CodeContext';\nimport HomePage from './components/pages/home/HomePage';\n\nfunction App() {\n  return (\n    <CodeProvider>\n      <HomePage />\n    </CodeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}