{"version":3,"sources":["components/model/TableContext.tsx","components/pages/home/utils/table_structure_schema.ts","components/pages/table/InputRowTableConfigCard.tsx","components/pages/table/TableConfigCard.tsx","components/pages/table/TableConfigPage.tsx","settings/routes.tsx","components/sider/SideBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TableConfigContext","React","createContext","TableConfigProvider","props","children","useState","configs","setConfigsState","openRawConfigDialog","setOpenRawConfigDialog","useEffect","tableConfig","localStorage","getItem","JSON","parse","setItem","stringify","setConfigs","useCallback","vs","value","Provider","tableStructureSchema","$schema","type","items","$ref","definitions","TableConfigElement","additionalProperties","properties","data_sizes","data_paths","table_name","columns","required","title","Column","column_type","name","InputRowTableConfigCard","useContext","setValue","onOpen","onClose","handleJSONEditorWillMount","monaco","languages","json","jsonDefaults","setDiagnosticsOptions","validate","enableSchemaRequest","schemas","uri","fileMatch","schema","subTitle","extra","onClick","style","maxWidth","Link","target","href","visible","onOk","onCancel","footer","width","window","innerWidth","height","language","options","minimap","enabled","beforeMount","e","onChange","TableConfigCard","config","index","setName","open","setOpen","formValues","path_size","map","v","i","path","size","updateTableName","updateConfig","filter","undefined","parseInt","margin","shape","EditOutlined","initialValues","onValuesChange","_","Title","level","List","fields","add","remove","gutter","key","restField","fieldKey","display","marginBottom","xs","md","Item","rules","message","placeholder","span","MinusCircleOutlined","className","block","icon","PlusOutlined","TableConfigPage","overflowY","c","routes","component","TableOutlined","SideBar","location","useLocation","history","useHistory","selectedPath","setSelectedPath","pathname","route","find","r","includes","theme","mode","selectedKeys","push","Layout","Header","Sider","Content","App","collapsed","setCollapsed","overflow","padding","bodyStyle","align","MenuUnfoldOutlined","MenuFoldOutlined","background","collapsible","trigger","minHeight","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcb9c680.chunk.js","sourcesContent":["import React from \"react\";\nimport { TableConfig } from \"./table-config\";\n\ninterface TableConfigContext {\n  configs: TableConfig[];\n  setConfigs(configs: TableConfig[]): void;\n  openRawConfigDialog: boolean;\n  setOpenRawConfigDialog(v: boolean): void;\n}\n\n//@ts-ignore\nexport const TableConfigContext = React.createContext<TableConfigContext>({});\n\nexport default function TableConfigProvider(props: any) {\n  const { children } = props;\n\n  const [configs, setConfigsState] = React.useState<TableConfig[]>([]);\n  const [openRawConfigDialog, setOpenRawConfigDialog] = React.useState(false);\n\n  React.useEffect(() => {\n    let tableConfig = localStorage.getItem(\"tableStructure\");\n    if (tableConfig !== null) {\n      setConfigsState(JSON.parse(tableConfig));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"tableStructure\", JSON.stringify(configs));\n  }, [configs]);\n\n  const setConfigs = React.useCallback((vs: TableConfig[]) => {\n    localStorage.setItem(\"tableStructure\", JSON.stringify(vs));\n    setConfigsState(vs);\n  }, []);\n\n  const value: TableConfigContext = {\n    configs,\n    setConfigs,\n    setOpenRawConfigDialog,\n    openRawConfigDialog,\n  };\n\n  return (\n    <TableConfigContext.Provider value={value}>\n      {children}\n    </TableConfigContext.Provider>\n  );\n}\n","export const tableStructureSchema = {\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  type: \"array\",\n  items: {\n    $ref: \"#/definitions/TableConfigElement\",\n  },\n  definitions: {\n    TableConfigElement: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        data_sizes: {\n          type: \"array\",\n          items: {\n            type: \"integer\",\n          },\n        },\n        data_paths: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        table_name: {\n          type: \"string\",\n        },\n        columns: {\n          type: \"array\",\n          items: {\n            $ref: \"#/definitions/Column\",\n          },\n        },\n      },\n      required: [\"columns\", \"data_sizes\", \"table_name\"],\n      title: \"TableConfigElement\",\n    },\n    Column: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        column_type: {\n          type: \"string\",\n        },\n        name: {\n          type: \"string\",\n        },\n      },\n      required: [\"column_type\", \"name\"],\n      title: \"Column\",\n    },\n  },\n};\n","import React from \"react\";\nimport Editor, { Monaco } from \"@monaco-editor/react\";\nimport * as monaco from \"monaco-editor\";\nimport { Button, PageHeader, Row, Typography, Modal } from \"antd\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport { tableStructureSchema } from \"../home/utils/table_structure_schema\";\n\nexport default function InputRowTableConfigCard() {\n  const { setOpenRawConfigDialog, openRawConfigDialog, configs, setConfigs } =\n    React.useContext(TableConfigContext);\n\n  const [value, setValue] = React.useState(\"\");\n\n  const onOpen = React.useCallback(() => {\n    setValue(JSON.stringify(configs, null, 4));\n    setOpenRawConfigDialog(true);\n  }, [configs]);\n\n  const onClose = React.useCallback(() => {\n    setConfigs(JSON.parse(value));\n    setOpenRawConfigDialog(false);\n  }, [value]);\n\n  const handleJSONEditorWillMount = React.useCallback(\n    (monaco: Monaco) => {\n      monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        enableSchemaRequest: true,\n        schemas: [\n          {\n            uri: \"https://raw.githubusercontent.com/sirily11/SECYAN-GEN/master/examples/table_config.json\",\n            fileMatch: [\"*\"],\n            schema: tableStructureSchema,\n          },\n        ],\n      });\n    },\n    [value]\n  );\n\n  return (\n    <PageHeader\n      title=\"Table Configuration\"\n      subTitle=\"Config your table's info here\"\n      extra={[\n        <Button type=\"primary\" onClick={onOpen}>\n          Set Raw Data\n        </Button>,\n      ]}\n    >\n      <Typography style={{ maxWidth: \"800px\" }}>\n        You can either use the raw Data Config Editor to modify your database\n        table's infomation, or use the GUI below to modify your table. You can\n        check this{\" \"}\n        <Typography.Link\n          target=\"_blank\"\n          href=\"https://github.com/sirily11/SECYAN-GEN/blob/master/examples/table_config.json\"\n        >\n          Link\n        </Typography.Link>{\" \"}\n        for example table configuration.\n      </Typography>\n      <Modal\n        title=\"Raw Data Configuration\"\n        visible={openRawConfigDialog}\n        onOk={onClose}\n        onCancel={onClose}\n        footer={[<Button onClick={onClose}>Close</Button>]}\n        width={window.innerWidth * 0.8}\n      >\n        <Editor\n          height={500}\n          language=\"json\"\n          options={{ minimap: { enabled: false } }}\n          beforeMount={(e) => handleJSONEditorWillMount(e)}\n          value={value}\n          onChange={(e) => {\n            setValue(e ?? \"\");\n          }}\n        />\n      </Modal>\n    </PageHeader>\n  );\n}\n","import { Button, Card, Input, Space, Form, Row, Col, Typography } from \"antd\";\nimport React from \"react\";\nimport { TableConfig } from \"../../model/table-config\";\nimport {\n  EditOutlined,\n  PlusOutlined,\n  MinusCircleOutlined,\n} from \"@ant-design/icons\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport Modal from \"antd/lib/modal/Modal\";\n\ninterface Props {\n  config: TableConfig;\n  index: number;\n}\n\ninterface FormValue {\n  path_size: { size: number; path: string }[];\n}\n\nexport default function TableConfigCard(props: Props) {\n  const { config, index } = props;\n  const [name, setName] = React.useState(config.table_name);\n  const [open, setOpen] = React.useState(false);\n  const { setConfigs, configs } = React.useContext(TableConfigContext);\n\n  const formValues = {\n    path_size: config.data_sizes.map((v, i) => {\n      return { path: config.data_paths[i], size: v };\n    }),\n  };\n\n  const updateTableName = React.useCallback(() => {\n    configs[index].table_name = name;\n    setConfigs(configs);\n    setOpen(false);\n  }, [name]);\n\n  const updateConfig = React.useCallback(\n    (value: FormValue) => {\n      let path_size = value.path_size.filter((v) => v !== undefined);\n      configs[index].data_sizes = path_size.map((v: any) => parseInt(v.size));\n      configs[index].data_paths = path_size.map((v: any) => v.path);\n      setConfigs(configs);\n    },\n    [config]\n  );\n\n  return (\n    <Card\n      title={config.table_name}\n      style={{ margin: 10 }}\n      extra={[\n        <Button shape=\"circle\" onClick={() => setOpen(true)}>\n          <EditOutlined />\n        </Button>,\n      ]}\n    >\n      <Form\n        name=\"data_paths\"\n        title=\"Data Sizes and\"\n        initialValues={formValues}\n        onValuesChange={(_, v) => {\n          updateConfig(v);\n        }}\n      >\n        {/* data sizes and data paths */}\n\n        <Typography.Title level={5}>Data Sizes and Paths</Typography.Title>\n        <Form.List name=\"path_size\">\n          {(fields, { add, remove }) => (\n            <Row gutter={[10, 10]}>\n              {fields.map(({ key, name, fieldKey, ...restField }) => (\n                <Col\n                  key={key}\n                  style={{ display: \"flex\", marginBottom: 8 }}\n                  xs={24}\n                  md={12}\n                >\n                  <Row style={{ width: \"100%\" }} gutter={[20, 10]}>\n                    <Col md={10} xs={24}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"size\"]}\n                        rules={[\n                          { required: true, message: \"Data Size is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data size\" type=\"number\" />\n                      </Form.Item>\n                    </Col>\n                    <Col md={12} xs={22}>\n                      <Form.Item\n                        {...restField}\n                        name={[name, \"path\"]}\n                        rules={[\n                          { required: true, message: \"Data Path is required\" },\n                        ]}\n                      >\n                        <Input placeholder=\"Data path\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={2}>\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n                        onClick={() => remove(name)}\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n              ))}\n              <Col xs={24}>\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add field\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          )}\n        </Form.List>\n\n        {/* end data sizes and data paths */}\n        {/* columns */}\n        <Typography.Title level={5}>Table Columns</Typography.Title>\n\n        {/* end columns */}\n      </Form>\n      <Modal\n        visible={open}\n        title=\"Table name\"\n        onCancel={() => {\n          setName(config.table_name);\n          setOpen(false);\n        }}\n        onOk={updateTableName}\n      >\n        <Input\n          placeholder=\"Table name\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n          }}\n        />\n      </Modal>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { TableConfigContext } from \"../../model/TableContext\";\nimport InputRowTableConfigCard from \"./InputRowTableConfigCard\";\nimport TableConfigCard from \"./TableConfigCard\";\n\nexport default function TableConfigPage() {\n  const { configs } = React.useContext(TableConfigContext);\n\n  return (\n    <div style={{ overflowY: \"scroll\", height: \"100%\" }}>\n      <InputRowTableConfigCard />\n      {configs.map((c, i) => (\n        <TableConfigCard key={`config-${i}`} config={c} index={i}/>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableOutlined } from \"@ant-design/icons\";\nimport TableConfigPage from \"../components/pages/table/TableConfigPage\";\n\ninterface Route {\n  path: string;\n  component: JSX.Element;\n  title: string;\n  icon: JSX.Element;\n}\n\nexport const routes: Route[] = [\n  {\n    path: \"/\",\n    title: \"Table Config\",\n    component: <TableConfigPage />,\n    icon: <TableOutlined />,\n  },\n];\n","import React from \"react\";\nimport { matchPath } from \"react-router\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport Sider from \"antd/lib/layout/Sider\";\nimport { Menu } from \"antd\";\nimport { routes } from \"../../settings/routes\";\n\nexport default function SideBar() {\n  const location = useLocation();\n  const history = useHistory();\n  const [selectedPath, setSelectedPath] = React.useState(routes[0].title);\n\n  React.useEffect(() => {\n    if (location.pathname !== routes[0].path) {\n      let route = routes.find((r) => location.pathname.includes(r.path));\n      if (route) {\n        setSelectedPath(route?.title);\n      }\n    }\n  }, [location]);\n\n  return (\n    <Menu\n      theme=\"light\"\n      mode=\"vertical-left\"\n      selectedKeys={[selectedPath]}\n      style={{ height: \"100%\" }}\n    >\n      {routes.map((r) => (\n        <Menu.Item\n          key={r.title}\n          icon={r.icon}\n          onClick={() => history.push(r.path)}\n        >\n          {r.title}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n}\nfunction useStyles() {\n  throw new Error(\"Function not implemented.\");\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Button, Card, Layout, Menu, Row } from \"antd\";\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport SideBar from \"./components/sider/SideBar\";\nimport { routes } from \"./settings/routes\";\nimport TableConfigProvider from \"./components/model/TableContext\";\n\nconst { Header, Sider, Content } = Layout;\n\nfunction App() {\n  const [collapsed, setCollapsed] = React.useState(false);\n\n  return (\n    <div style={{ overflow: \"hidden\" }}>\n      <TableConfigProvider>\n        <Router>\n          <Layout style={{ height: \"100vh\", overflow: \"hidden\" }}>\n            <Card style={{ margin: 0, padding: 0 }} bodyStyle={{ padding: 0 }}>\n              <Row align=\"middle\">\n                <div\n                  className=\"trigger\"\n                  onClick={() => setCollapsed(!collapsed)}\n                >\n                  {collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n                </div>\n                <h1 style={{ padding: 10 }}>CodeGen</h1>\n              </Row>\n            </Card>\n\n            <Layout style={{ background: \"white\" }}>\n              <Sider\n                collapsible\n                style={{ background: \"#fff\" }}\n                trigger={null}\n                collapsed={collapsed}\n              >\n                <SideBar />\n              </Sider>\n              <Content\n                style={{\n                  margin: \"0px 0px\",\n                  padding: 0,\n                  minHeight: 280,\n                }}\n              >\n                <Switch>\n                  {routes.map((r, i) => (\n                    <Route key={`route-${i}`} path={r.path} exact>\n                      {r.component}\n                    </Route>\n                  ))}\n                </Switch>\n              </Content>\n            </Layout>\n          </Layout>\n        </Router>\n      </TableConfigProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}